
Weak_AES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800490c  0800490c  0000590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004914  08004914  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800491c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08004978  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004978  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae6c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd5  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00012bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000665  00000000  00000000  00013438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025964  00000000  00000000  00013a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3b2  00000000  00000000  00039401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e669c  00000000  00000000  000457b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012be4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002444  00000000  00000000  0012be94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047a4 	.word	0x080047a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	080047a4 	.word	0x080047a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SBox>:
#include "AES.h"

uint8_t SBox(uint8_t input){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0c2      	sub	sp, #264	@ 0x108
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4602      	mov	r2, r0
 8000500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000504:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000508:	701a      	strb	r2, [r3, #0]

	uint8_t sbox[256] = {
 800050a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800050e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <SBox+0x48>)
 8000514:	4618      	mov	r0, r3
 8000516:	4611      	mov	r1, r2
 8000518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800051c:	461a      	mov	r2, r3
 800051e:	f004 f8e9 	bl	80046f4 <memcpy>
	    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  // C
	    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  // D
	    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  // E
	    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}; // F

	return sbox[input];
 8000522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000526:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000530:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000534:	5cd3      	ldrb	r3, [r2, r3]

}
 8000536:	4618      	mov	r0, r3
 8000538:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	080047bc 	.word	0x080047bc

08000544 <subBytes>:

void subBytes(T_STATE* input){
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < 4; i++){
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e01f      	b.n	800059a <subBytes+0x56>
		for(j = 0; j < 4; j++){
 800055a:	2300      	movs	r3, #0
 800055c:	73bb      	strb	r3, [r7, #14]
 800055e:	e016      	b.n	800058e <subBytes+0x4a>
			input->state[i][j] = SBox(input->state[i][j]);
 8000560:	7bfa      	ldrb	r2, [r7, #15]
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	440a      	add	r2, r1
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	7bfd      	ldrb	r5, [r7, #15]
 8000570:	7bbc      	ldrb	r4, [r7, #14]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffc0 	bl	80004f8 <SBox>
 8000578:	4603      	mov	r3, r0
 800057a:	4619      	mov	r1, r3
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	00ab      	lsls	r3, r5, #2
 8000580:	4413      	add	r3, r2
 8000582:	4423      	add	r3, r4
 8000584:	460a      	mov	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 4; j++){
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	3301      	adds	r3, #1
 800058c:	73bb      	strb	r3, [r7, #14]
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d9e5      	bls.n	8000560 <subBytes+0x1c>
	for(i = 0; i < 4; i++){
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	3301      	adds	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d9dc      	bls.n	800055a <subBytes+0x16>
		}
	}

}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}

080005aa <shiftRows>:

void shiftRows(T_STATE* input_state){
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]

	//A temporary array to store a copy of the line being worked on
	uint8_t* temp_array = malloc(4*sizeof(char));
 80005b2:	2004      	movs	r0, #4
 80005b4:	f003 ff9c 	bl	80044f0 <malloc>
 80005b8:	4603      	mov	r3, r0
 80005ba:	60bb      	str	r3, [r7, #8]

	//Loop variables
	uint8_t i = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73bb      	strb	r3, [r7, #14]

	//Looping over lines 1,2,3 of the state
	//Line 0 stays unchanged by the shiftRows operation
	for(j = 1; j < 4; j++){
 80005c4:	2301      	movs	r3, #1
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e030      	b.n	800062c <shiftRows+0x82>

		//Copying the line into temporary memory
		for(i = 0; i < 4; i++){
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e00d      	b.n	80005ec <shiftRows+0x42>
			temp_array[i] = input_state->state[i][j];
 80005d0:	7bf9      	ldrb	r1, [r7, #15]
 80005d2:	7bba      	ldrb	r2, [r7, #14]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	68b8      	ldr	r0, [r7, #8]
 80005d8:	4403      	add	r3, r0
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	4401      	add	r1, r0
 80005e0:	440a      	add	r2, r1
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 4; i++){
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3301      	adds	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d9ee      	bls.n	80005d0 <shiftRows+0x26>
		}

		//Looping over the line, shifting the bytes as required
		for(i = 0; i < 4; i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e013      	b.n	8000620 <shiftRows+0x76>
			input_state->state[i][j] = temp_array[(i+j) % 4];
 80005f8:	7bfa      	ldrb	r2, [r7, #15]
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	4413      	add	r3, r2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	18d1      	adds	r1, r2, r3
 8000608:	7bfa      	ldrb	r2, [r7, #15]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	7808      	ldrb	r0, [r1, #0]
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	440a      	add	r2, r1
 8000614:	4413      	add	r3, r2
 8000616:	4602      	mov	r2, r0
 8000618:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 4; i++){
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	3301      	adds	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9e8      	bls.n	80005f8 <shiftRows+0x4e>
	for(j = 1; j < 4; j++){
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	3301      	adds	r3, #1
 800062a:	73bb      	strb	r3, [r7, #14]
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d9cb      	bls.n	80005ca <shiftRows+0x20>
		}

	}

	//Releasing the temporary array
	free(temp_array);
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f003 ff64 	bl	8004500 <free>

	return;
 8000638:	bf00      	nop

}
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <mixColumns>:

void mixColumns(T_STATE* input_state){
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	//A temporary array to store a copy of the column being worked on
	uint8_t* temp_array = malloc(4*sizeof(char));
 8000648:	2004      	movs	r0, #4
 800064a:	f003 ff51 	bl	80044f0 <malloc>
 800064e:	4603      	mov	r3, r0
 8000650:	60bb      	str	r3, [r7, #8]

	//Loop variables
	uint8_t i = 0; //Column
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]

	//Iterating over the columns
	for(i = 0; i < 4; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e09d      	b.n	8000798 <mixColumns+0x158>

		//Copying the column being worked on to the temporary array
		memcpy(temp_array, input_state->state[i], 4*sizeof(char));
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	601a      	str	r2, [r3, #0]

		//Matrix multiplication on the column, using the xtime helper function
		//See part 5.1.3 of FIPS-197 for detailed explanation
		input_state->state[i][0] = xtime(temp_array[0]) ^ (xtime(temp_array[1]) ^ temp_array[1]) ^ temp_array[2] ^ temp_array[3];
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fab5 	bl	8000be0 <xtime>
 8000676:	4603      	mov	r3, r0
 8000678:	461c      	mov	r4, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 faad 	bl	8000be0 <xtime>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3301      	adds	r3, #1
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4053      	eors	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4063      	eors	r3, r4
 8000696:	b2da      	uxtb	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	3302      	adds	r3, #2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4053      	eors	r3, r2
 80006a0:	b2d9      	uxtb	r1, r3
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3303      	adds	r3, #3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	7bfa      	ldrb	r2, [r7, #15]
 80006aa:	404b      	eors	r3, r1
 80006ac:	b2d9      	uxtb	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		input_state->state[i][1] = temp_array[0] ^ xtime(temp_array[1]) ^ (xtime(temp_array[2]) ^ temp_array[2]) ^ temp_array[3];
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	781c      	ldrb	r4, [r3, #0]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fa8e 	bl	8000be0 <xtime>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4063      	eors	r3, r4
 80006c8:	b2dc      	uxtb	r4, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3302      	adds	r3, #2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fa85 	bl	8000be0 <xtime>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3302      	adds	r3, #2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4053      	eors	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4063      	eors	r3, r4
 80006e6:	b2d9      	uxtb	r1, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	3303      	adds	r3, #3
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	404a      	eors	r2, r1
 80006f2:	b2d1      	uxtb	r1, r2
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	705a      	strb	r2, [r3, #1]
		input_state->state[i][2] = temp_array[0] ^ temp_array[1] ^ xtime(temp_array[2]) ^ (xtime(temp_array[3]) ^ temp_array[3]);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4053      	eors	r3, r2
 800070a:	b2dc      	uxtb	r4, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	3302      	adds	r3, #2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fa64 	bl	8000be0 <xtime>
 8000718:	4603      	mov	r3, r0
 800071a:	4063      	eors	r3, r4
 800071c:	b2dc      	uxtb	r4, r3
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3303      	adds	r3, #3
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fa5b 	bl	8000be0 <xtime>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3303      	adds	r3, #3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4053      	eors	r3, r2
 8000736:	b2da      	uxtb	r2, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4062      	eors	r2, r4
 800073c:	b2d1      	uxtb	r1, r2
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	709a      	strb	r2, [r3, #2]
		input_state->state[i][3] = (xtime(temp_array[0]) ^ temp_array[0]) ^ temp_array[1] ^ temp_array[2] ^ xtime(temp_array[3]);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fa47 	bl	8000be0 <xtime>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4053      	eors	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	3301      	adds	r3, #1
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4053      	eors	r3, r2
 8000766:	b2da      	uxtb	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	3302      	adds	r3, #2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4053      	eors	r3, r2
 8000770:	b2dc      	uxtb	r4, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3303      	adds	r3, #3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fa31 	bl	8000be0 <xtime>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4062      	eors	r2, r4
 8000786:	b2d1      	uxtb	r1, r2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	70da      	strb	r2, [r3, #3]
	for(i = 0; i < 4; i++){
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3301      	adds	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b03      	cmp	r3, #3
 800079c:	f67f af5e 	bls.w	800065c <mixColumns+0x1c>

	}

	//Freeing the temporary array
	free(temp_array);
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f003 fead 	bl	8004500 <free>

	return;
 80007a6:	bf00      	nop

}
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}

080007ae <addRoundKey>:

//XOR the current state with the round key, byte by byte
void addRoundKey(T_STATE* input_state, T_STATE* round_key){
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]

	//Loop variables
	uint8_t i = 0; //Line
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0; //Column
 80007bc:	2300      	movs	r3, #0
 80007be:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < 4; i++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	e023      	b.n	800080e <addRoundKey+0x60>
		for(j = 0; j < 4; j++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	73bb      	strb	r3, [r7, #14]
 80007ca:	e01a      	b.n	8000802 <addRoundKey+0x54>
			input_state->state[i][j] = input_state->state[i][j] ^ round_key->state[i][j];
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	440a      	add	r2, r1
 80007d6:	4413      	add	r3, r2
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	440a      	add	r2, r1
 80007e4:	4413      	add	r3, r2
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	4041      	eors	r1, r0
 80007ee:	b2c8      	uxtb	r0, r1
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	440a      	add	r2, r1
 80007f6:	4413      	add	r3, r2
 80007f8:	4602      	mov	r2, r0
 80007fa:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 4; j++){
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	3301      	adds	r3, #1
 8000800:	73bb      	strb	r3, [r7, #14]
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d9e1      	bls.n	80007cc <addRoundKey+0x1e>
	for(i = 0; i < 4; i++){
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	3301      	adds	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d9d8      	bls.n	80007c6 <addRoundKey+0x18>
		}
	}

}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <keyExpansion>:

//See section 5.2 of FIPS-197 for technical explanations
//For AES-128, Nr = 10; Nb = 4 and Nk = 4.
T_STATE** keyExpansion(uint8_t* key){
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b090      	sub	sp, #64	@ 0x40
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

	//Output variable
	T_STATE** output_array;
	output_array = malloc((Nr + 1)*sizeof(T_STATE*));
 800082c:	202c      	movs	r0, #44	@ 0x2c
 800082e:	f003 fe5f 	bl	80044f0 <malloc>
 8000832:	4603      	mov	r3, r0
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Loop variable
	uint8_t i = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t j = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	for(i = 0; i <= Nr; i++){
 8000842:	2300      	movs	r3, #0
 8000844:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000848:	e00e      	b.n	8000868 <keyExpansion+0x44>
	    output_array[i] = malloc(sizeof(T_STATE));
 800084a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000852:	18d4      	adds	r4, r2, r3
 8000854:	2010      	movs	r0, #16
 8000856:	f003 fe4b 	bl	80044f0 <malloc>
 800085a:	4603      	mov	r3, r0
 800085c:	6023      	str	r3, [r4, #0]
	for(i = 0; i <= Nr; i++){
 800085e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000862:	3301      	adds	r3, #1
 8000864:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000868:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086c:	2b0a      	cmp	r3, #10
 800086e:	d9ec      	bls.n	800084a <keyExpansion+0x26>
	}

	//Temp variable to hold the intermediate steps
	uint8_t** w = malloc((4 * (Nr + 1)) * sizeof(uint8_t*));
 8000870:	20b0      	movs	r0, #176	@ 0xb0
 8000872:	f003 fe3d 	bl	80044f0 <malloc>
 8000876:	4603      	mov	r3, r0
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
	for(i = 0; i < (4 * (Nr + 1)); i++){
 800087a:	2300      	movs	r3, #0
 800087c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000880:	e00e      	b.n	80008a0 <keyExpansion+0x7c>
	    w[i] = malloc(4*sizeof(uint8_t));
 8000882:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800088a:	18d4      	adds	r4, r2, r3
 800088c:	2004      	movs	r0, #4
 800088e:	f003 fe2f 	bl	80044f0 <malloc>
 8000892:	4603      	mov	r3, r0
 8000894:	6023      	str	r3, [r4, #0]
	for(i = 0; i < (4 * (Nr + 1)); i++){
 8000896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800089a:	3301      	adds	r3, #1
 800089c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80008a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80008a6:	d9ec      	bls.n	8000882 <keyExpansion+0x5e>
	}

	//Key expansion constants
	uint8_t Rcon[10][4] = {
 80008a8:	4b92      	ldr	r3, [pc, #584]	@ (8000af4 <keyExpansion+0x2d0>)
 80008aa:	f107 0408 	add.w	r4, r7, #8
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008bc:	e884 0003 	stmia.w	r4, {r0, r1}
			{0x80, 0x00, 0x00, 0x00},
			{0x1b, 0x00, 0x00, 0x00},
			{0x36, 0x00, 0x00, 0x00}
	};

	i = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i < Nk){
 80008c6:	e03f      	b.n	8000948 <keyExpansion+0x124>
		w[i][0] = key[4*i];
 80008c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	441a      	add	r2, r3
 80008d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008dc:	440b      	add	r3, r1
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	701a      	strb	r2, [r3, #0]
		w[i][1] = key[4*i+1];
 80008e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	3301      	adds	r3, #1
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	441a      	add	r2, r3
 80008f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008f8:	440b      	add	r3, r1
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	7812      	ldrb	r2, [r2, #0]
 8000900:	701a      	strb	r2, [r3, #0]
		w[i][2] = key[4*i+2];
 8000902:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	3302      	adds	r3, #2
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	441a      	add	r2, r3
 800090e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000916:	440b      	add	r3, r1
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3302      	adds	r3, #2
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	701a      	strb	r2, [r3, #0]
		w[i][3] = key[4*i+3];
 8000920:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	3303      	adds	r3, #3
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	441a      	add	r2, r3
 800092c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3303      	adds	r3, #3
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	701a      	strb	r2, [r3, #0]
		i++;
 800093e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000942:	3301      	adds	r3, #1
 8000944:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i < Nk){
 8000948:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800094c:	2b03      	cmp	r3, #3
 800094e:	d9bb      	bls.n	80008c8 <keyExpansion+0xa4>
	}

	//Another temporary variable
	uint8_t* temp = malloc(4*sizeof(uint8_t));
 8000950:	2004      	movs	r0, #4
 8000952:	f003 fdcd 	bl	80044f0 <malloc>
 8000956:	4603      	mov	r3, r0
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30

	while(i <= (4 * Nr) + 3){
 800095a:	e0bd      	b.n	8000ad8 <keyExpansion+0x2b4>

		memcpy(temp, w[i-1], 4*sizeof(uint8_t));
 800095c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000960:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800096a:	4413      	add	r3, r2
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000974:	601a      	str	r2, [r3, #0]

		if(i% Nk == 0){
 8000976:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d14b      	bne.n	8000a1c <keyExpansion+0x1f8>
			rotWord(temp);
 8000984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000986:	f000 f964 	bl	8000c52 <rotWord>
			subWord(temp);
 800098a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800098c:	f000 f941 	bl	8000c12 <subWord>
			temp[0] = temp[0] ^ Rcon[(i/Nk) - 1][0];
 8000990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	3b01      	subs	r3, #1
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3340      	adds	r3, #64	@ 0x40
 80009a2:	443b      	add	r3, r7
 80009a4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80009a8:	4053      	eors	r3, r2
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ae:	701a      	strb	r2, [r3, #0]
			temp[1] = temp[1] ^ Rcon[(i/Nk) - 1][1];
 80009b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009b2:	3301      	adds	r3, #1
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b01      	subs	r3, #1
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	3340      	adds	r3, #64	@ 0x40
 80009c4:	443b      	add	r3, r7
 80009c6:	f813 2c37 	ldrb.w	r2, [r3, #-55]
 80009ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009cc:	3301      	adds	r3, #1
 80009ce:	404a      	eors	r2, r1
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	701a      	strb	r2, [r3, #0]
			temp[2] = temp[2] ^ Rcon[(i/Nk) - 1][2];
 80009d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d6:	3302      	adds	r3, #2
 80009d8:	7819      	ldrb	r1, [r3, #0]
 80009da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	3b01      	subs	r3, #1
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	3340      	adds	r3, #64	@ 0x40
 80009e8:	443b      	add	r3, r7
 80009ea:	f813 2c36 	ldrb.w	r2, [r3, #-54]
 80009ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f0:	3302      	adds	r3, #2
 80009f2:	404a      	eors	r2, r1
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	701a      	strb	r2, [r3, #0]
			temp[3] = temp[3] ^ Rcon[(i/Nk) - 1][3];
 80009f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fa:	3303      	adds	r3, #3
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3b01      	subs	r3, #1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	3340      	adds	r3, #64	@ 0x40
 8000a0c:	443b      	add	r3, r7
 8000a0e:	f813 2c35 	ldrb.w	r2, [r3, #-53]
 8000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a14:	3303      	adds	r3, #3
 8000a16:	404a      	eors	r2, r1
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	701a      	strb	r2, [r3, #0]
		}

		w[i][0] = w[i - Nk][0] ^ temp[0];
 8000a1c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a20:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <keyExpansion+0x2d4>)
 8000a22:	4413      	add	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a28:	4413      	add	r3, r2
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	7819      	ldrb	r1, [r3, #0]
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a3a:	4403      	add	r3, r0
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	404a      	eors	r2, r1
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
		w[i][1] = w[i - Nk][1] ^ temp[1];
 8000a44:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a48:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <keyExpansion+0x2d4>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a50:	4413      	add	r3, r2
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	7819      	ldrb	r1, [r3, #0]
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a66:	4403      	add	r3, r0
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	404a      	eors	r2, r1
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	701a      	strb	r2, [r3, #0]
		w[i][2] = w[i - Nk][2] ^ temp[2];
 8000a72:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <keyExpansion+0x2d4>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a7e:	4413      	add	r3, r2
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3302      	adds	r3, #2
 8000a84:	7819      	ldrb	r1, [r3, #0]
 8000a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a88:	3302      	adds	r3, #2
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a94:	4403      	add	r3, r0
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	404a      	eors	r2, r1
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	701a      	strb	r2, [r3, #0]
		w[i][3] = w[i - Nk][3] ^ temp[3];
 8000aa0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <keyExpansion+0x2d4>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000aac:	4413      	add	r3, r2
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	7819      	ldrb	r1, [r3, #0]
 8000ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ac2:	4403      	add	r3, r0
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	404a      	eors	r2, r1
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	701a      	strb	r2, [r3, #0]

		i++;
 8000ace:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i <= (4 * Nr) + 3){
 8000ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000adc:	2b2b      	cmp	r3, #43	@ 0x2b
 8000ade:	f67f af3d 	bls.w	800095c <keyExpansion+0x138>
	}

	//At this point, the columns of the round keys have been computed and stored in w
	//We transform them back into states

	for(i = 0; i <= Nr; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000ae8:	e070      	b.n	8000bcc <keyExpansion+0x3a8>
		for(j = 0; j < 4; j++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000af0:	e063      	b.n	8000bba <keyExpansion+0x396>
 8000af2:	bf00      	nop
 8000af4:	080048bc 	.word	0x080048bc
 8000af8:	3ffffffc 	.word	0x3ffffffc
			output_array[i]->state[j][0] = w[4*i+j][0];
 8000afc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b00:	009a      	lsls	r2, r3, #2
 8000b02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b0c:	4413      	add	r3, r2
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b18:	4413      	add	r3, r2
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000b20:	7809      	ldrb	r1, [r1, #0]
 8000b22:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			output_array[i]->state[j][1] = w[4*i+j][1];
 8000b26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b2a:	009a      	lsls	r2, r3, #2
 8000b2c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b30:	4413      	add	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b36:	4413      	add	r3, r2
 8000b38:	6819      	ldr	r1, [r3, #0]
 8000b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b42:	4413      	add	r3, r2
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b4a:	7849      	ldrb	r1, [r1, #1]
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	460a      	mov	r2, r1
 8000b52:	705a      	strb	r2, [r3, #1]
			output_array[i]->state[j][2] = w[4*i+j][2];
 8000b54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b58:	009a      	lsls	r2, r3, #2
 8000b5a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b64:	4413      	add	r3, r2
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b70:	4413      	add	r3, r2
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b78:	7889      	ldrb	r1, [r1, #2]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	460a      	mov	r2, r1
 8000b80:	709a      	strb	r2, [r3, #2]
			output_array[i]->state[j][3] = w[4*i+j][3];
 8000b82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b86:	009a      	lsls	r2, r3, #2
 8000b88:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b92:	4413      	add	r3, r2
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b9e:	4413      	add	r3, r2
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000ba6:	78c9      	ldrb	r1, [r1, #3]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	70da      	strb	r2, [r3, #3]
		for(j = 0; j < 4; j++){
 8000bb0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000bba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d99c      	bls.n	8000afc <keyExpansion+0x2d8>
	for(i = 0; i <= Nr; i++){
 8000bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bd0:	2b0a      	cmp	r3, #10
 8000bd2:	d98a      	bls.n	8000aea <keyExpansion+0x2c6>
		}
	}

	return output_array;
 8000bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3740      	adds	r7, #64	@ 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bde:	bf00      	nop

08000be0 <xtime>:

uint8_t xtime(uint8_t input){
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]

	uint8_t msb = input >> 7;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	09db      	lsrs	r3, r3, #7
 8000bee:	73bb      	strb	r3, [r7, #14]

	//See FIPS-197 for explanations
	uint8_t result = input << 1;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]

	if(msb){
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <xtime+0x24>
		result = result ^ 0x1b;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	f083 031b 	eor.w	r3, r3, #27
 8000c02:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <subWord>:

void subWord(uint8_t* input_word){
 8000c12:	b590      	push	{r4, r7, lr}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]

	//Loop variable
	uint8_t i = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 4; i++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e00e      	b.n	8000c42 <subWord+0x30>
		input_word[i] = SBox(input_word[i]);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	18d4      	adds	r4, r2, r3
 8000c32:	4608      	mov	r0, r1
 8000c34:	f7ff fc60 	bl	80004f8 <SBox>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 4; i++){
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d9ed      	bls.n	8000c24 <subWord+0x12>
	}

}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}

08000c52 <rotWord>:

void rotWord(uint8_t* input_word){
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]

	//temp variable
	uint8_t temp = input_word[0];
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	73fb      	strb	r3, [r7, #15]
	input_word[0] = input_word[1];
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	785a      	ldrb	r2, [r3, #1]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	701a      	strb	r2, [r3, #0]
	input_word[1] = input_word[2];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	7892      	ldrb	r2, [r2, #2]
 8000c70:	701a      	strb	r2, [r3, #0]
	input_word[2] = input_word[3];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3302      	adds	r3, #2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	78d2      	ldrb	r2, [r2, #3]
 8000c7a:	701a      	strb	r2, [r3, #0]
	input_word[3] = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	701a      	strb	r2, [r3, #0]

}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <cipher>:

void cipher(T_STATE** expanded_key, T_STATE* input){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]

	addRoundKey(input, expanded_key[0]);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6838      	ldr	r0, [r7, #0]
 8000ca2:	f7ff fd84 	bl	80007ae <addRoundKey>

	uint8_t i = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]

	//The first round is excluded, so that signals can be set to help the attacker
	//Setting up pin D7 as the signal
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb0:	4822      	ldr	r0, [pc, #136]	@ (8000d3c <cipher+0xac>)
 8000cb2:	f000 ffc7 	bl	8001c44 <HAL_GPIO_WritePin>

	//We single out the subBytes function for its non-linearity
	subBytes(input);
 8000cb6:	6838      	ldr	r0, [r7, #0]
 8000cb8:	f7ff fc44 	bl	8000544 <subBytes>

	//Lowering the signal
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <cipher+0xac>)
 8000cc4:	f000 ffbe 	bl	8001c44 <HAL_GPIO_WritePin>

	shiftRows(input);
 8000cc8:	6838      	ldr	r0, [r7, #0]
 8000cca:	f7ff fc6e 	bl	80005aa <shiftRows>
	mixColumns(input);
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	f7ff fcb6 	bl	8000640 <mixColumns>
	addRoundKey(input, expanded_key[1]);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	f7ff fd66 	bl	80007ae <addRoundKey>

	for(i = 2; i < 10; i++){
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e014      	b.n	8000d12 <cipher+0x82>

		subBytes(input);
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f7ff fc2b 	bl	8000544 <subBytes>
		shiftRows(input);
 8000cee:	6838      	ldr	r0, [r7, #0]
 8000cf0:	f7ff fc5b 	bl	80005aa <shiftRows>
		mixColumns(input);
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f7ff fca3 	bl	8000640 <mixColumns>
		addRoundKey(input, expanded_key[i]);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f7ff fd51 	bl	80007ae <addRoundKey>
	for(i = 2; i < 10; i++){
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	d9e7      	bls.n	8000ce8 <cipher+0x58>

	}

	subBytes(input);
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f7ff fc13 	bl	8000544 <subBytes>
	shiftRows(input);
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f7ff fc43 	bl	80005aa <shiftRows>
	addRoundKey(input, expanded_key[10]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3328      	adds	r3, #40	@ 0x28
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f7ff fd3e 	bl	80007ae <addRoundKey>

	return;
 8000d32:	bf00      	nop

}
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021400 	.word	0x40021400

08000d40 <bytesToState>:

T_STATE* bytesToState(uint8_t* input_array){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	T_STATE* output;
	output = malloc(sizeof(T_STATE));
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f003 fbd1 	bl	80044f0 <malloc>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60fb      	str	r3, [r7, #12]

	output->state[0][0] = input_array[0x0];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	701a      	strb	r2, [r3, #0]
	output->state[0][1] = input_array[0x1];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	705a      	strb	r2, [r3, #1]
	output->state[0][2] = input_array[0x2];
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	789a      	ldrb	r2, [r3, #2]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	709a      	strb	r2, [r3, #2]
	output->state[0][3] = input_array[0x3];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	78da      	ldrb	r2, [r3, #3]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	70da      	strb	r2, [r3, #3]
	output->state[1][0] = input_array[0x4];
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791a      	ldrb	r2, [r3, #4]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	711a      	strb	r2, [r3, #4]
	output->state[1][1] = input_array[0x5];
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	795a      	ldrb	r2, [r3, #5]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	715a      	strb	r2, [r3, #5]
	output->state[1][2] = input_array[0x6];
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	799a      	ldrb	r2, [r3, #6]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	719a      	strb	r2, [r3, #6]
	output->state[1][3] = input_array[0x7];
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	79da      	ldrb	r2, [r3, #7]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	71da      	strb	r2, [r3, #7]
	output->state[2][0] = input_array[0x8];
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7a1a      	ldrb	r2, [r3, #8]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	721a      	strb	r2, [r3, #8]
	output->state[2][1] = input_array[0x9];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a5a      	ldrb	r2, [r3, #9]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	725a      	strb	r2, [r3, #9]
	output->state[2][2] = input_array[0xA];
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7a9a      	ldrb	r2, [r3, #10]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	729a      	strb	r2, [r3, #10]
	output->state[2][3] = input_array[0xB];
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7ada      	ldrb	r2, [r3, #11]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	72da      	strb	r2, [r3, #11]
	output->state[3][0] = input_array[0xC];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7b1a      	ldrb	r2, [r3, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	731a      	strb	r2, [r3, #12]
	output->state[3][1] = input_array[0xD];
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7b5a      	ldrb	r2, [r3, #13]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	735a      	strb	r2, [r3, #13]
	output->state[3][2] = input_array[0xE];
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7b9a      	ldrb	r2, [r3, #14]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	739a      	strb	r2, [r3, #14]
	output->state[3][3] = input_array[0xF];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7bda      	ldrb	r2, [r3, #15]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	73da      	strb	r2, [r3, #15]

	return output;
 8000dd2:	68fb      	ldr	r3, [r7, #12]

}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <stateToBytes>:

uint8_t* stateToBytes(T_STATE* input_state){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

	uint8_t* output;
	output = malloc(16*sizeof(uint8_t));
 8000de4:	2010      	movs	r0, #16
 8000de6:	f003 fb83 	bl	80044f0 <malloc>
 8000dea:	4603      	mov	r3, r0
 8000dec:	60fb      	str	r3, [r7, #12]

	output[0x0] = input_state->state[0][0];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	701a      	strb	r2, [r3, #0]
	output[0x1] = input_state->state[0][1];
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	7852      	ldrb	r2, [r2, #1]
 8000dfe:	701a      	strb	r2, [r3, #0]
	output[0x2] = input_state->state[0][2];
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3302      	adds	r3, #2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	7892      	ldrb	r2, [r2, #2]
 8000e08:	701a      	strb	r2, [r3, #0]
	output[0x3] = input_state->state[0][3];
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	78d2      	ldrb	r2, [r2, #3]
 8000e12:	701a      	strb	r2, [r3, #0]
	output[0x4] = input_state->state[1][0];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3304      	adds	r3, #4
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	7912      	ldrb	r2, [r2, #4]
 8000e1c:	701a      	strb	r2, [r3, #0]
	output[0x5] = input_state->state[1][1];
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3305      	adds	r3, #5
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	7952      	ldrb	r2, [r2, #5]
 8000e26:	701a      	strb	r2, [r3, #0]
	output[0x6] = input_state->state[1][2];
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	7992      	ldrb	r2, [r2, #6]
 8000e30:	701a      	strb	r2, [r3, #0]
	output[0x7] = input_state->state[1][3];
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3307      	adds	r3, #7
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	79d2      	ldrb	r2, [r2, #7]
 8000e3a:	701a      	strb	r2, [r3, #0]
	output[0x8] = input_state->state[2][0];
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3308      	adds	r3, #8
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7a12      	ldrb	r2, [r2, #8]
 8000e44:	701a      	strb	r2, [r3, #0]
	output[0x9] = input_state->state[2][1];
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3309      	adds	r3, #9
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7a52      	ldrb	r2, [r2, #9]
 8000e4e:	701a      	strb	r2, [r3, #0]
	output[0xA] = input_state->state[2][2];
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	330a      	adds	r3, #10
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	7a92      	ldrb	r2, [r2, #10]
 8000e58:	701a      	strb	r2, [r3, #0]
	output[0xB] = input_state->state[2][3];
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	330b      	adds	r3, #11
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	7ad2      	ldrb	r2, [r2, #11]
 8000e62:	701a      	strb	r2, [r3, #0]
	output[0xC] = input_state->state[3][0];
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	330c      	adds	r3, #12
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	7b12      	ldrb	r2, [r2, #12]
 8000e6c:	701a      	strb	r2, [r3, #0]
	output[0xD] = input_state->state[3][1];
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	330d      	adds	r3, #13
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	7b52      	ldrb	r2, [r2, #13]
 8000e76:	701a      	strb	r2, [r3, #0]
	output[0xE] = input_state->state[3][2];
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	330e      	adds	r3, #14
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	7b92      	ldrb	r2, [r2, #14]
 8000e80:	701a      	strb	r2, [r3, #0]
	output[0xF] = input_state->state[3][3];
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	330f      	adds	r3, #15
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	7bd2      	ldrb	r2, [r2, #15]
 8000e8a:	701a      	strb	r2, [r3, #0]

	return output;
 8000e8c:	68fb      	ldr	r3, [r7, #12]

}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fb24 	bl	80014ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f817 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f8b3 	bl	8001010 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000eaa:	f000 f87b 	bl	8000fa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //Preparing the AES cipher
  uint8_t key[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <main+0x34>)
 8000eb0:	463c      	mov	r4, r7
 8000eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  expanded_key = keyExpansion(key);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fcb2 	bl	8000824 <keyExpansion>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a03      	ldr	r2, [pc, #12]	@ (8000ed0 <main+0x38>)
 8000ec4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec6:	bf00      	nop
 8000ec8:	e7fd      	b.n	8000ec6 <main+0x2e>
 8000eca:	bf00      	nop
 8000ecc:	080048e4 	.word	0x080048e4
 8000ed0:	20000114 	.word	0x20000114

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	@ 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	2230      	movs	r2, #48	@ 0x30
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fbc2 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef8:	f000 febe 	bl	8001c78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <SystemClock_Config+0xc8>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a26      	ldr	r2, [pc, #152]	@ (8000f9c <SystemClock_Config+0xc8>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <SystemClock_Config+0xc8>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <SystemClock_Config+0xcc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f1c:	4a20      	ldr	r2, [pc, #128]	@ (8000fa0 <SystemClock_Config+0xcc>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <SystemClock_Config+0xcc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f48:	2348      	movs	r3, #72	@ 0x48
 8000f4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fe9d 	bl	8001c98 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f64:	f000 f984 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV128;
 8000f70:	23d0      	movs	r3, #208	@ 0xd0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f92b 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f90:	f000 f96e 	bl	8001270 <Error_Handler>
  }
}
 8000f94:	bf00      	nop
 8000f96:	3750      	adds	r7, #80	@ 0x50
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_USART3_UART_Init+0x64>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000fe8:	f001 ff10 	bl	8002e0c <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ff2:	f000 f93d 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  //Enabling the interrupt
  HAL_UART_Receive_IT (&huart3, Rx_data, 16);
 8000ff6:	2210      	movs	r2, #16
 8000ff8:	4904      	ldr	r1, [pc, #16]	@ (800100c <MX_USART3_UART_Init+0x68>)
 8000ffa:	4802      	ldr	r0, [pc, #8]	@ (8001004 <MX_USART3_UART_Init+0x60>)
 8000ffc:	f001 ffb2 	bl	8002f64 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000078 	.word	0x20000078
 8001008:	40004800 	.word	0x40004800
 800100c:	20000100 	.word	0x20000100

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b77      	ldr	r3, [pc, #476]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a76      	ldr	r2, [pc, #472]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b74      	ldr	r3, [pc, #464]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	4b71      	ldr	r3, [pc, #452]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a70      	ldr	r2, [pc, #448]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b6e      	ldr	r3, [pc, #440]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a6a      	ldr	r2, [pc, #424]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b68      	ldr	r3, [pc, #416]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b65      	ldr	r3, [pc, #404]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a64      	ldr	r2, [pc, #400]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b62      	ldr	r3, [pc, #392]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	4b5f      	ldr	r3, [pc, #380]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a5e      	ldr	r2, [pc, #376]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b5c      	ldr	r3, [pc, #368]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a58      	ldr	r2, [pc, #352]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b56      	ldr	r3, [pc, #344]	@ (8001204 <MX_GPIO_Init+0x1f4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010bc:	4852      	ldr	r0, [pc, #328]	@ (8001208 <MX_GPIO_Init+0x1f8>)
 80010be:	f000 fdc1 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2140      	movs	r1, #64	@ 0x40
 80010c6:	4851      	ldr	r0, [pc, #324]	@ (800120c <MX_GPIO_Init+0x1fc>)
 80010c8:	f000 fdbc 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	484b      	ldr	r0, [pc, #300]	@ (8001210 <MX_GPIO_Init+0x200>)
 80010e4:	f000 fc02 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010e8:	2332      	movs	r3, #50	@ 0x32
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f8:	230b      	movs	r3, #11
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4843      	ldr	r0, [pc, #268]	@ (8001210 <MX_GPIO_Init+0x200>)
 8001104:	f000 fbf2 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001108:	2386      	movs	r3, #134	@ 0x86
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001118:	230b      	movs	r3, #11
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	483c      	ldr	r0, [pc, #240]	@ (8001214 <MX_GPIO_Init+0x204>)
 8001124:	f000 fbe2 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001128:	f244 0381 	movw	r3, #16513	@ 0x4081
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4831      	ldr	r0, [pc, #196]	@ (8001208 <MX_GPIO_Init+0x1f8>)
 8001142:	f000 fbd3 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001158:	230b      	movs	r3, #11
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4829      	ldr	r0, [pc, #164]	@ (8001208 <MX_GPIO_Init+0x1f8>)
 8001164:	f000 fbc2 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001168:	2340      	movs	r3, #64	@ 0x40
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4823      	ldr	r0, [pc, #140]	@ (800120c <MX_GPIO_Init+0x1fc>)
 8001180:	f000 fbb4 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	481d      	ldr	r0, [pc, #116]	@ (800120c <MX_GPIO_Init+0x1fc>)
 8001198:	f000 fba8 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800119c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ae:	230a      	movs	r3, #10
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4816      	ldr	r0, [pc, #88]	@ (8001214 <MX_GPIO_Init+0x204>)
 80011ba:	f000 fb97 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4810      	ldr	r0, [pc, #64]	@ (8001214 <MX_GPIO_Init+0x204>)
 80011d4:	f000 fb8a 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011d8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ea:	230b      	movs	r3, #11
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0x1fc>)
 80011f6:	f000 fb79 	bl	80018ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	bf00      	nop
 80011fc:	3730      	adds	r7, #48	@ 0x30
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400
 800120c:	40021800 	.word	0x40021800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//This will be called once 16 bytes are received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  //HAL_UART_Receive_IT(&huart3, Rx_data, 16);
  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
  T_STATE* input;
  input = bytesToState(Rx_data);
 8001220:	480f      	ldr	r0, [pc, #60]	@ (8001260 <HAL_UART_RxCpltCallback+0x48>)
 8001222:	f7ff fd8d 	bl	8000d40 <bytesToState>
 8001226:	60f8      	str	r0, [r7, #12]

  cipher(expanded_key, input);
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_UART_RxCpltCallback+0x4c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd2e 	bl	8000c90 <cipher>

  Tx_data = stateToBytes(input);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fdd1 	bl	8000ddc <stateToBytes>
 800123a:	4603      	mov	r3, r0
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_UART_RxCpltCallback+0x50>)
 800123e:	6013      	str	r3, [r2, #0]

  HAL_UART_Transmit_IT(&huart3, Tx_data, 16*sizeof(uint8_t));
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_UART_RxCpltCallback+0x50>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2210      	movs	r2, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <HAL_UART_RxCpltCallback+0x54>)
 800124a:	f001 fe2d 	bl	8002ea8 <HAL_UART_Transmit_IT>

  //Re-enabling the interrupt
  HAL_UART_Receive_IT (&huart3, Rx_data, 16);
 800124e:	2210      	movs	r2, #16
 8001250:	4903      	ldr	r1, [pc, #12]	@ (8001260 <HAL_UART_RxCpltCallback+0x48>)
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <HAL_UART_RxCpltCallback+0x54>)
 8001254:	f001 fe86 	bl	8002f64 <HAL_UART_Receive_IT>

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000100 	.word	0x20000100
 8001264:	20000114 	.word	0x20000114
 8001268:	20000110 	.word	0x20000110
 800126c:	20000078 	.word	0x20000078

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_MspInit+0x44>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_MspInit+0x44>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_MspInit+0x44>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x44>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0aa      	sub	sp, #168	@ 0xa8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2284      	movs	r2, #132	@ 0x84
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 f9c1 	bl	800466c <memset>
  if(huart->Instance==USART3)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <HAL_UART_MspInit+0xc4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d144      	bne.n	800137e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80012fa:	2310      	movs	r3, #16
 80012fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f992 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800130e:	f7ff ffaf 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_UART_MspInit+0xc8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_UART_MspInit+0xc8>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_UART_MspInit+0xc8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_UART_MspInit+0xc8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a17      	ldr	r2, [pc, #92]	@ (800138c <HAL_UART_MspInit+0xc8>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_UART_MspInit+0xc8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001342:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001366:	4619      	mov	r1, r3
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <HAL_UART_MspInit+0xcc>)
 800136a:	f000 fabf 	bl	80018ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2027      	movs	r0, #39	@ 0x27
 8001374:	f000 f9f1 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001378:	2027      	movs	r0, #39	@ 0x27
 800137a:	f000 fa0a 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	37a8      	adds	r7, #168	@ 0xa8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004800 	.word	0x40004800
 800138c:	40023800 	.word	0x40023800
 8001390:	40020c00 	.word	0x40020c00

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f8bb 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <USART3_IRQHandler+0x10>)
 80013fa:	f001 fdf7 	bl	8002fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000078 	.word	0x20000078

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f003 f930 	bl	800469c <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20050000 	.word	0x20050000
 8001468:	00000400 	.word	0x00000400
 800146c:	20000118 	.word	0x20000118
 8001470:	20000268 	.word	0x20000268

08001474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149e:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a0:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b4:	4c0b      	ldr	r4, [pc, #44]	@ (80014e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014c2:	f7ff ffd7 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f003 f8ef 	bl	80046a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff fce5 	bl	8000e98 <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014dc:	0800491c 	.word	0x0800491c
  ldr r2, =_sbss
 80014e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014e4:	20000268 	.word	0x20000268

080014e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC_IRQHandler>

080014ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f928 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f805 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fa:	f7ff febf 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f943 	bl	80017ae <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f90b 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	2000011c 	.word	0x2000011c

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000011c 	.word	0x2000011c

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	05fa0000 	.word	0x05fa0000

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	@ (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff feda 	bl	800158c <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d008      	beq.n	80017f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e052      	b.n	800189e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0216 	bic.w	r2, r2, #22
 8001806:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001816:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <HAL_DMA_Abort+0x62>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	e013      	b.n	8001872 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184a:	f7ff fe9f 	bl	800158c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d90c      	bls.n	8001872 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e015      	b.n	800189e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e4      	bne.n	800184a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001884:	223f      	movs	r2, #63	@ 0x3f
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d004      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2280      	movs	r2, #128	@ 0x80
 80018be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e00c      	b.n	80018de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2205      	movs	r2, #5
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e175      	b.n	8001bf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8164 	bne.w	8001bf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_Init+0x56>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d017      	beq.n	80019e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d123      	bne.n	8001a34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80be 	beq.w	8001bf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a8e:	4a61      	ldr	r2, [pc, #388]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d037      	beq.n	8001b2a <HAL_GPIO_Init+0x23e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_GPIO_Init+0x23a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x236>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a55      	ldr	r2, [pc, #340]	@ (8001c24 <HAL_GPIO_Init+0x338>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x232>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	@ (8001c28 <HAL_GPIO_Init+0x33c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a53      	ldr	r2, [pc, #332]	@ (8001c2c <HAL_GPIO_Init+0x340>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	@ (8001c30 <HAL_GPIO_Init+0x344>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_GPIO_Init+0x348>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a50      	ldr	r2, [pc, #320]	@ (8001c38 <HAL_GPIO_Init+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c3c <HAL_GPIO_Init+0x350>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001b02:	2309      	movs	r3, #9
 8001b04:	e012      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b06:	230a      	movs	r3, #10
 8001b08:	e010      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x240>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_GPIO_Init+0x354>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae86 	bls.w	800190c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40022400 	.word	0x40022400
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40007000 	.word	0x40007000

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e291      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8087 	beq.w	8001dca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b96      	ldr	r3, [pc, #600]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc8:	4b93      	ldr	r3, [pc, #588]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d112      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
 8001cd4:	4b90      	ldr	r3, [pc, #576]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x130>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d168      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e26b      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7a>
 8001d04:	4b84      	ldr	r3, [pc, #528]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a83      	ldr	r2, [pc, #524]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e02e      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x9c>
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b7c      	ldr	r3, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a72      	ldr	r2, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc08 	bl	800158c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fc04 	bl	800158c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e21f      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fbf4 	bl	800158c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fbf0 	bl	800158c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e20b      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x110>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d069      	beq.n	8001eaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd6:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x190>
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1df      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	493d      	ldr	r1, [pc, #244]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e040      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a38      	ldr	r2, [pc, #224]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fba6 	bl	800158c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fba2 	bl	800158c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1bd      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4929      	ldr	r1, [pc, #164]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
 8001e76:	e018      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff fb82 	bl	800158c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fb7e 	bl	800158c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e199      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d038      	beq.n	8001f28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec2:	4a15      	ldr	r2, [pc, #84]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff fb5f 	bl	800158c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fb5b 	bl	800158c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e176      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x23a>
 8001ef0:	e01a      	b.n	8001f28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb45 	bl	800158c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fb41 	bl	800158c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d903      	bls.n	8001f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e15c      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
 8001f18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b91      	ldr	r3, [pc, #580]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a4 	beq.w	800207e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b8b      	ldr	r3, [pc, #556]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a87      	ldr	r2, [pc, #540]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b85      	ldr	r3, [pc, #532]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b82      	ldr	r3, [pc, #520]	@ (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fb09 	bl	800158c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff fb05 	bl	800158c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	@ 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e120      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b75      	ldr	r3, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x31a>
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x33c>
 8001fba:	4b6a      	ldr	r3, [pc, #424]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc6:	4b67      	ldr	r3, [pc, #412]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	4a66      	ldr	r2, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x35e>
 8001fdc:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	4a60      	ldr	r2, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a57      	ldr	r2, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff fab9 	bl	800158c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fab5 	bl	800158c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0ce      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x386>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff faa3 	bl	800158c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fa9f 	bl	800158c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0b8      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80a4 	beq.w	80021d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d06b      	beq.n	800216c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d149      	bne.n	8002130 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a30      	ldr	r2, [pc, #192]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff fa70 	bl	800158c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff fa6c 	bl	800158c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e087      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	4313      	orrs	r3, r2
 80020f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a18      	ldr	r2, [pc, #96]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fa40 	bl	800158c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff fa3c 	bl	800158c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e057      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x478>
 800212e:	e04f      	b.n	80021d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fa26 	bl	800158c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fa22 	bl	800158c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e03d      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x4ac>
 8002162:	e035      	b.n	80021d0 <HAL_RCC_OscConfig+0x538>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_RCC_OscConfig+0x544>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d028      	beq.n	80021cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11a      	bne.n	80021cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4965      	ldr	r1, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7ff f95a 	bl	800158c <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff f956 	bl	800158c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 020f 	bic.w	r2, r3, #15
 800231a:	4922      	ldr	r1, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8b6 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	080048f4 	.word	0x080048f4
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b094      	sub	sp, #80	@ 0x50
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c4:	2300      	movs	r3, #0
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023c8:	2300      	movs	r3, #0
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b79      	ldr	r3, [pc, #484]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80e1 	bhi.w	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e0db      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b73      	ldr	r3, [pc, #460]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80023ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f0:	e0db      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b73      	ldr	r3, [pc, #460]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f6:	e0d8      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b6f      	ldr	r3, [pc, #444]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002400:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002402:	4b6d      	ldr	r3, [pc, #436]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	2200      	movs	r2, #0
 8002416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002418:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	@ 0x34
 8002426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4621      	mov	r1, r4
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	6139      	str	r1, [r7, #16]
 8002448:	4629      	mov	r1, r5
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800245c:	4659      	mov	r1, fp
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4651      	mov	r1, sl
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4651      	mov	r1, sl
 800246c:	ebb2 0801 	subs.w	r8, r2, r1
 8002470:	4659      	mov	r1, fp
 8002472:	eb63 0901 	sbc.w	r9, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248a:	4690      	mov	r8, r2
 800248c:	4699      	mov	r9, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb18 0303 	adds.w	r3, r8, r3
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	462b      	mov	r3, r5
 8002498:	eb49 0303 	adc.w	r3, r9, r3
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024aa:	4629      	mov	r1, r5
 80024ac:	024b      	lsls	r3, r1, #9
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b4:	4621      	mov	r1, r4
 80024b6:	024a      	lsls	r2, r1, #9
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024c8:	f7fd fe9e 	bl	8000208 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d4:	e058      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	4611      	mov	r1, r2
 80024e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0159      	lsls	r1, r3, #5
 80024fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002502:	0150      	lsls	r0, r2, #5
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4641      	mov	r1, r8
 800250a:	ebb2 0a01 	subs.w	sl, r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	eb63 0b01 	sbc.w	fp, r3, r1
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002528:	ebb2 040a 	subs.w	r4, r2, sl
 800252c:	eb63 050b 	sbc.w	r5, r3, fp
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	464b      	mov	r3, r9
 800254c:	eb45 0303 	adc.w	r3, r5, r3
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255e:	4629      	mov	r1, r5
 8002560:	028b      	lsls	r3, r1, #10
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002568:	4621      	mov	r1, r4
 800256a:	028a      	lsls	r2, r1, #10
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	61fa      	str	r2, [r7, #28]
 8002578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257c:	f7fd fe44 	bl	8000208 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800259a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80025a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3750      	adds	r7, #80	@ 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08004904 	.word	0x08004904

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffdc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0b5b      	lsrs	r3, r3, #13
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08004904 	.word	0x08004904

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002654:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a68      	ldr	r2, [pc, #416]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800265e:	6093      	str	r3, [r2, #8]
 8002660:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	4964      	ldr	r1, [pc, #400]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002686:	4b5d      	ldr	r3, [pc, #372]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	4959      	ldr	r1, [pc, #356]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d017      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c2:	4b4e      	ldr	r3, [pc, #312]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	494a      	ldr	r1, [pc, #296]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e0:	d101      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808b 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	4a39      	ldr	r2, [pc, #228]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	@ 0x40
 800271c:	4b37      	ldr	r3, [pc, #220]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002728:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a34      	ldr	r2, [pc, #208]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe ff2a 	bl	800158c <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe ff26 	bl	800158c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e357      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	4b2c      	ldr	r3, [pc, #176]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800275a:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002762:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d035      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d02e      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002778:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002780:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d114      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe feee 	bl	800158c <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe feea 	bl	800158c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e319      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027e2:	d111      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	4901      	ldr	r1, [pc, #4]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
 80027fa:	e00b      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	0ffffcff 	.word	0x0ffffcff
 8002808:	4baa      	ldr	r3, [pc, #680]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4aa9      	ldr	r2, [pc, #676]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	4ba7      	ldr	r3, [pc, #668]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	49a4      	ldr	r1, [pc, #656]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002822:	4313      	orrs	r3, r2
 8002824:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002832:	4ba0      	ldr	r3, [pc, #640]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002838:	4a9e      	ldr	r2, [pc, #632]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002842:	4b9c      	ldr	r3, [pc, #624]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002844:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	4999      	ldr	r1, [pc, #612]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002860:	4b94      	ldr	r3, [pc, #592]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002866:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800286e:	4991      	ldr	r1, [pc, #580]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002882:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002890:	4988      	ldr	r1, [pc, #544]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a4:	4b83      	ldr	r3, [pc, #524]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028b2:	4980      	ldr	r1, [pc, #512]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028c6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	4977      	ldr	r1, [pc, #476]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e8:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	496f      	ldr	r1, [pc, #444]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f023 020c 	bic.w	r2, r3, #12
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	4966      	ldr	r1, [pc, #408]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292c:	4b61      	ldr	r3, [pc, #388]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	495e      	ldr	r1, [pc, #376]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294e:	4b59      	ldr	r3, [pc, #356]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	4955      	ldr	r1, [pc, #340]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002970:	4b50      	ldr	r3, [pc, #320]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002976:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	494d      	ldr	r1, [pc, #308]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002992:	4b48      	ldr	r3, [pc, #288]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	4944      	ldr	r1, [pc, #272]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029b4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	493c      	ldr	r1, [pc, #240]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029d6:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e4:	4933      	ldr	r1, [pc, #204]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029f8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a06:	492b      	ldr	r1, [pc, #172]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d011      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a28:	4922      	ldr	r1, [pc, #136]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a38:	d101      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a68:	4912      	ldr	r1, [pc, #72]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a8c:	4909      	ldr	r1, [pc, #36]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d006      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80d9 	beq.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002aa8:	4b02      	ldr	r3, [pc, #8]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a01      	ldr	r2, [pc, #4]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aba:	f7fe fd67 	bl	800158c <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ac2:	f7fe fd63 	bl	800158c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	@ 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e194      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d021      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11d      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002af4:	4b64      	ldr	r3, [pc, #400]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b02:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b08:	0e1b      	lsrs	r3, r3, #24
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	019a      	lsls	r2, r3, #6
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	071b      	lsls	r3, r3, #28
 8002b28:	4957      	ldr	r1, [pc, #348]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02e      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5a:	d129      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b6a:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b70:	0f1b      	lsrs	r3, r3, #28
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	019a      	lsls	r2, r3, #6
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	071b      	lsls	r3, r3, #28
 8002b90:	493d      	ldr	r1, [pc, #244]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b98:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b9e:	f023 021f 	bic.w	r2, r3, #31
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4937      	ldr	r1, [pc, #220]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01d      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bbc:	4b32      	ldr	r3, [pc, #200]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc2:	0e1b      	lsrs	r3, r3, #24
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bca:	4b2f      	ldr	r3, [pc, #188]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd0:	0f1b      	lsrs	r3, r3, #28
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	019a      	lsls	r2, r3, #6
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	071b      	lsls	r3, r3, #28
 8002bf0:	4925      	ldr	r1, [pc, #148]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d011      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	019a      	lsls	r2, r3, #6
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	071b      	lsls	r3, r3, #28
 8002c20:	4919      	ldr	r1, [pc, #100]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c28:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fcaa 	bl	800158c <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c3c:	f7fe fca6 	bl	800158c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0d7      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 80cd 	bne.w	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fc8d 	bl	800158c <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c76:	f7fe fc89 	bl	800158c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d903      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0ba      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c98:	d0ed      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d12a      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cc2:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	0f1b      	lsrs	r3, r3, #28
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	019a      	lsls	r2, r3, #6
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	4944      	ldr	r1, [pc, #272]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cfe:	4b42      	ldr	r3, [pc, #264]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d04:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	493d      	ldr	r1, [pc, #244]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d022      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d2c:	d11d      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d2e:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	0e1b      	lsrs	r3, r3, #24
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d3c:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	0f1b      	lsrs	r3, r3, #28
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	4929      	ldr	r1, [pc, #164]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d028      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7c:	0e1b      	lsrs	r3, r3, #24
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	019a      	lsls	r2, r3, #6
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	4917      	ldr	r1, [pc, #92]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	4911      	ldr	r1, [pc, #68]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fbda 	bl	800158c <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ddc:	f7fe fbd6 	bl	800158c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e007      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dfa:	d1ef      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e040      	b.n	8002ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fa48 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	@ 0x24
 8002e38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fbc0 	bl	80035d0 <UART_SetConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fe18 	bl	8003a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fe9f 	bl	8003bdc <UART_CheckIdleState>
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b08b      	sub	sp, #44	@ 0x2c
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d147      	bne.n	8002f4e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_UART_Transmit_IT+0x22>
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e040      	b.n	8002f50 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2221      	movs	r2, #33	@ 0x21
 8002ef6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f00:	d107      	bne.n	8002f12 <HAL_UART_Transmit_IT+0x6a>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <HAL_UART_Transmit_IT+0xb4>)
 8002f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002f10:	e002      	b.n	8002f18 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <HAL_UART_Transmit_IT+0xb8>)
 8002f16:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	613b      	str	r3, [r7, #16]
   return(result);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e6      	bne.n	8002f18 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	372c      	adds	r7, #44	@ 0x2c
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	0800410f 	.word	0x0800410f
 8002f60:	08004059 	.word	0x08004059

08002f64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d132      	bne.n	8002fe2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_UART_Receive_IT+0x24>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e02b      	b.n	8002fe4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	613b      	str	r3, [r7, #16]
   return(result);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	69f9      	ldr	r1, [r7, #28]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e6      	bne.n	8002fa0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fefd 	bl	8003dd8 <UART_Start_Receive_IT>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	e000      	b.n	8002fe4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	@ 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0ba      	sub	sp, #232	@ 0xe8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800301a:	4013      	ands	r3, r2
 800301c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00f      	beq.n	8003054 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8297 	beq.w	8003578 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
      }
      return;
 8003052:	e291      	b.n	8003578 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8117 	beq.w	800328c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800305e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800306a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800306e:	4b85      	ldr	r3, [pc, #532]	@ (8003284 <HAL_UART_IRQHandler+0x298>)
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 810a 	beq.w	800328c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d011      	beq.n	80030a8 <HAL_UART_IRQHandler+0xbc>
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d011      	beq.n	80030d8 <HAL_UART_IRQHandler+0xec>
 80030b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2202      	movs	r2, #2
 80030c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d011      	beq.n	8003108 <HAL_UART_IRQHandler+0x11c>
 80030e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003124:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800313a:	f043 0208 	orr.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <HAL_UART_IRQHandler+0x18a>
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003154:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 81fd 	beq.w	800357c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800318e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b40      	cmp	r3, #64	@ 0x40
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04f      	beq.n	800326e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fec8 	bl	8003f64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031de:	2b40      	cmp	r3, #64	@ 0x40
 80031e0:	d141      	bne.n	8003266 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3308      	adds	r3, #8
 80031e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3308      	adds	r3, #8
 800320a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800320e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800321a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1d9      	bne.n	80031e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003232:	2b00      	cmp	r3, #0
 8003234:	d013      	beq.n	800325e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323a:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <HAL_UART_IRQHandler+0x29c>)
 800323c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fb2f 	bl	80018a6 <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003258:	4610      	mov	r0, r2
 800325a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00f      	b.n	800327e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9a0 	bl	80035a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e00b      	b.n	800327e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f99c 	bl	80035a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e007      	b.n	800327e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f998 	bl	80035a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800327c:	e17e      	b.n	800357c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327e:	bf00      	nop
    return;
 8003280:	e17c      	b.n	800357c <HAL_UART_IRQHandler+0x590>
 8003282:	bf00      	nop
 8003284:	04000120 	.word	0x04000120
 8003288:	0800402d 	.word	0x0800402d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 814c 	bne.w	800352e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8145 	beq.w	800352e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 813e 	beq.w	800352e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2210      	movs	r2, #16
 80032b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b40      	cmp	r3, #64	@ 0x40
 80032c6:	f040 80b6 	bne.w	8003436 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8150 	beq.w	8003580 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ea:	429a      	cmp	r2, r3
 80032ec:	f080 8148 	bcs.w	8003580 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003304:	f000 8086 	beq.w	8003414 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800331c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003336:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800333e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1da      	bne.n	8003308 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3308      	adds	r3, #8
 8003358:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003376:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800337a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800337e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e1      	bne.n	8003352 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800339e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e3      	bne.n	800338e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e4:	f023 0310 	bic.w	r3, r3, #16
 80033e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e4      	bne.n	80033d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe f9d9 	bl	80017c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003426:	b29b      	uxth	r3, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8c2 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003434:	e0a4      	b.n	8003580 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003442:	b29b      	uxth	r3, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8096 	beq.w	8003584 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8091 	beq.w	8003584 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003476:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
 8003486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800348a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e4      	bne.n	8003462 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	623b      	str	r3, [r7, #32]
   return(result);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 0310 	bic.w	r3, r3, #16
 80034f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	617b      	str	r3, [r7, #20]
   return(result);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e4      	bne.n	80034e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f846 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800352c:	e02a      	b.n	8003584 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800353a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01c      	beq.n	8003588 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
    }
    return;
 8003556:	e017      	b.n	8003588 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <HAL_UART_IRQHandler+0x59e>
 8003564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fe2c 	bl	80041ce <UART_EndTransmit_IT>
    return;
 8003576:	e008      	b.n	800358a <HAL_UART_IRQHandler+0x59e>
      return;
 8003578:	bf00      	nop
 800357a:	e006      	b.n	800358a <HAL_UART_IRQHandler+0x59e>
    return;
 800357c:	bf00      	nop
 800357e:	e004      	b.n	800358a <HAL_UART_IRQHandler+0x59e>
      return;
 8003580:	bf00      	nop
 8003582:	e002      	b.n	800358a <HAL_UART_IRQHandler+0x59e>
      return;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <HAL_UART_IRQHandler+0x59e>
    return;
 8003588:	bf00      	nop
  }

}
 800358a:	37e8      	adds	r7, #232	@ 0xe8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003894 <UART_SetConfig+0x2c4>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	430b      	orrs	r3, r1
 8003606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a94      	ldr	r2, [pc, #592]	@ (8003898 <UART_SetConfig+0x2c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d120      	bne.n	800368e <UART_SetConfig+0xbe>
 800364c:	4b93      	ldr	r3, [pc, #588]	@ (800389c <UART_SetConfig+0x2cc>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b03      	cmp	r3, #3
 8003658:	d816      	bhi.n	8003688 <UART_SetConfig+0xb8>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <UART_SetConfig+0x90>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	0800367d 	.word	0x0800367d
 8003668:	08003677 	.word	0x08003677
 800366c:	08003683 	.word	0x08003683
 8003670:	2301      	movs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e150      	b.n	8003918 <UART_SetConfig+0x348>
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e14d      	b.n	8003918 <UART_SetConfig+0x348>
 800367c:	2304      	movs	r3, #4
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e14a      	b.n	8003918 <UART_SetConfig+0x348>
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e147      	b.n	8003918 <UART_SetConfig+0x348>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e144      	b.n	8003918 <UART_SetConfig+0x348>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a83      	ldr	r2, [pc, #524]	@ (80038a0 <UART_SetConfig+0x2d0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d132      	bne.n	80036fe <UART_SetConfig+0x12e>
 8003698:	4b80      	ldr	r3, [pc, #512]	@ (800389c <UART_SetConfig+0x2cc>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d828      	bhi.n	80036f8 <UART_SetConfig+0x128>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0xdc>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036e7 	.word	0x080036e7
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	080036f9 	.word	0x080036f9
 80036dc:	080036f3 	.word	0x080036f3
 80036e0:	2300      	movs	r3, #0
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e118      	b.n	8003918 <UART_SetConfig+0x348>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e115      	b.n	8003918 <UART_SetConfig+0x348>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e112      	b.n	8003918 <UART_SetConfig+0x348>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e10f      	b.n	8003918 <UART_SetConfig+0x348>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e10c      	b.n	8003918 <UART_SetConfig+0x348>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a68      	ldr	r2, [pc, #416]	@ (80038a4 <UART_SetConfig+0x2d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d120      	bne.n	800374a <UART_SetConfig+0x17a>
 8003708:	4b64      	ldr	r3, [pc, #400]	@ (800389c <UART_SetConfig+0x2cc>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003712:	2b30      	cmp	r3, #48	@ 0x30
 8003714:	d013      	beq.n	800373e <UART_SetConfig+0x16e>
 8003716:	2b30      	cmp	r3, #48	@ 0x30
 8003718:	d814      	bhi.n	8003744 <UART_SetConfig+0x174>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d009      	beq.n	8003732 <UART_SetConfig+0x162>
 800371e:	2b20      	cmp	r3, #32
 8003720:	d810      	bhi.n	8003744 <UART_SetConfig+0x174>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0x15c>
 8003726:	2b10      	cmp	r3, #16
 8003728:	d006      	beq.n	8003738 <UART_SetConfig+0x168>
 800372a:	e00b      	b.n	8003744 <UART_SetConfig+0x174>
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e0f2      	b.n	8003918 <UART_SetConfig+0x348>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e0ef      	b.n	8003918 <UART_SetConfig+0x348>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0ec      	b.n	8003918 <UART_SetConfig+0x348>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0e9      	b.n	8003918 <UART_SetConfig+0x348>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0e6      	b.n	8003918 <UART_SetConfig+0x348>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <UART_SetConfig+0x2d8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x1c6>
 8003754:	4b51      	ldr	r3, [pc, #324]	@ (800389c <UART_SetConfig+0x2cc>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800375e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x1ba>
 8003762:	2bc0      	cmp	r3, #192	@ 0xc0
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x1c0>
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x1ae>
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x1c0>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x1a8>
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x1b4>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x1c0>
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e0cc      	b.n	8003918 <UART_SetConfig+0x348>
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e0c9      	b.n	8003918 <UART_SetConfig+0x348>
 8003784:	2304      	movs	r3, #4
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e0c6      	b.n	8003918 <UART_SetConfig+0x348>
 800378a:	2308      	movs	r3, #8
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e0c3      	b.n	8003918 <UART_SetConfig+0x348>
 8003790:	2310      	movs	r3, #16
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0c0      	b.n	8003918 <UART_SetConfig+0x348>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a44      	ldr	r2, [pc, #272]	@ (80038ac <UART_SetConfig+0x2dc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d125      	bne.n	80037ec <UART_SetConfig+0x21c>
 80037a0:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <UART_SetConfig+0x2cc>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ae:	d017      	beq.n	80037e0 <UART_SetConfig+0x210>
 80037b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b4:	d817      	bhi.n	80037e6 <UART_SetConfig+0x216>
 80037b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ba:	d00b      	beq.n	80037d4 <UART_SetConfig+0x204>
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c0:	d811      	bhi.n	80037e6 <UART_SetConfig+0x216>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <UART_SetConfig+0x1fe>
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d006      	beq.n	80037da <UART_SetConfig+0x20a>
 80037cc:	e00b      	b.n	80037e6 <UART_SetConfig+0x216>
 80037ce:	2300      	movs	r3, #0
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0a1      	b.n	8003918 <UART_SetConfig+0x348>
 80037d4:	2302      	movs	r3, #2
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e09e      	b.n	8003918 <UART_SetConfig+0x348>
 80037da:	2304      	movs	r3, #4
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e09b      	b.n	8003918 <UART_SetConfig+0x348>
 80037e0:	2308      	movs	r3, #8
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e098      	b.n	8003918 <UART_SetConfig+0x348>
 80037e6:	2310      	movs	r3, #16
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e095      	b.n	8003918 <UART_SetConfig+0x348>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2f      	ldr	r2, [pc, #188]	@ (80038b0 <UART_SetConfig+0x2e0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d125      	bne.n	8003842 <UART_SetConfig+0x272>
 80037f6:	4b29      	ldr	r3, [pc, #164]	@ (800389c <UART_SetConfig+0x2cc>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003804:	d017      	beq.n	8003836 <UART_SetConfig+0x266>
 8003806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800380a:	d817      	bhi.n	800383c <UART_SetConfig+0x26c>
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d00b      	beq.n	800382a <UART_SetConfig+0x25a>
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003816:	d811      	bhi.n	800383c <UART_SetConfig+0x26c>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <UART_SetConfig+0x254>
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d006      	beq.n	8003830 <UART_SetConfig+0x260>
 8003822:	e00b      	b.n	800383c <UART_SetConfig+0x26c>
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e076      	b.n	8003918 <UART_SetConfig+0x348>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e073      	b.n	8003918 <UART_SetConfig+0x348>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e070      	b.n	8003918 <UART_SetConfig+0x348>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e06d      	b.n	8003918 <UART_SetConfig+0x348>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e06a      	b.n	8003918 <UART_SetConfig+0x348>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <UART_SetConfig+0x2e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d138      	bne.n	80038be <UART_SetConfig+0x2ee>
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <UART_SetConfig+0x2cc>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003856:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800385a:	d017      	beq.n	800388c <UART_SetConfig+0x2bc>
 800385c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003860:	d82a      	bhi.n	80038b8 <UART_SetConfig+0x2e8>
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003866:	d00b      	beq.n	8003880 <UART_SetConfig+0x2b0>
 8003868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386c:	d824      	bhi.n	80038b8 <UART_SetConfig+0x2e8>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <UART_SetConfig+0x2aa>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003876:	d006      	beq.n	8003886 <UART_SetConfig+0x2b6>
 8003878:	e01e      	b.n	80038b8 <UART_SetConfig+0x2e8>
 800387a:	2300      	movs	r3, #0
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e04b      	b.n	8003918 <UART_SetConfig+0x348>
 8003880:	2302      	movs	r3, #2
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e048      	b.n	8003918 <UART_SetConfig+0x348>
 8003886:	2304      	movs	r3, #4
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e045      	b.n	8003918 <UART_SetConfig+0x348>
 800388c:	2308      	movs	r3, #8
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e042      	b.n	8003918 <UART_SetConfig+0x348>
 8003892:	bf00      	nop
 8003894:	efff69f3 	.word	0xefff69f3
 8003898:	40011000 	.word	0x40011000
 800389c:	40023800 	.word	0x40023800
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40005000 	.word	0x40005000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	40007800 	.word	0x40007800
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e02c      	b.n	8003918 <UART_SetConfig+0x348>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a72      	ldr	r2, [pc, #456]	@ (8003a8c <UART_SetConfig+0x4bc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x344>
 80038c8:	4b71      	ldr	r3, [pc, #452]	@ (8003a90 <UART_SetConfig+0x4c0>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038d6:	d017      	beq.n	8003908 <UART_SetConfig+0x338>
 80038d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038dc:	d817      	bhi.n	800390e <UART_SetConfig+0x33e>
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e2:	d00b      	beq.n	80038fc <UART_SetConfig+0x32c>
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d811      	bhi.n	800390e <UART_SetConfig+0x33e>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <UART_SetConfig+0x326>
 80038ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f2:	d006      	beq.n	8003902 <UART_SetConfig+0x332>
 80038f4:	e00b      	b.n	800390e <UART_SetConfig+0x33e>
 80038f6:	2300      	movs	r3, #0
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e00d      	b.n	8003918 <UART_SetConfig+0x348>
 80038fc:	2302      	movs	r3, #2
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e00a      	b.n	8003918 <UART_SetConfig+0x348>
 8003902:	2304      	movs	r3, #4
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e007      	b.n	8003918 <UART_SetConfig+0x348>
 8003908:	2308      	movs	r3, #8
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e004      	b.n	8003918 <UART_SetConfig+0x348>
 800390e:	2310      	movs	r3, #16
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x348>
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003920:	d15b      	bne.n	80039da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d828      	bhi.n	800397a <UART_SetConfig+0x3aa>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0x360>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003955 	.word	0x08003955
 8003934:	0800395d 	.word	0x0800395d
 8003938:	08003965 	.word	0x08003965
 800393c:	0800397b 	.word	0x0800397b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7fe fe42 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003958:	61b8      	str	r0, [r7, #24]
        break;
 800395a:	e013      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7fe fe52 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8003960:	61b8      	str	r0, [r7, #24]
        break;
 8003962:	e00f      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <UART_SetConfig+0x4c4>)
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e00c      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fd25 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800396e:	61b8      	str	r0, [r7, #24]
        break;
 8003970:	e008      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e004      	b.n	8003984 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77bb      	strb	r3, [r7, #30]
        break;
 8003982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d074      	beq.n	8003a74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0f      	cmp	r3, #15
 80039a4:	d916      	bls.n	80039d4 <UART_SetConfig+0x404>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d212      	bcs.n	80039d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f023 030f 	bic.w	r3, r3, #15
 80039b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	89fa      	ldrh	r2, [r7, #14]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e04f      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77bb      	strb	r3, [r7, #30]
 80039d8:	e04c      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d828      	bhi.n	8003a32 <UART_SetConfig+0x462>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0x418>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe fde6 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e013      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7fe fdf6 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8003a18:	61b8      	str	r0, [r7, #24]
        break;
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <UART_SetConfig+0x4c4>)
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e00c      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe fcc9 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8003a26:	61b8      	str	r0, [r7, #24]
        break;
 8003a28:	e008      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e004      	b.n	8003a3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77bb      	strb	r3, [r7, #30]
        break;
 8003a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085a      	lsrs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	441a      	add	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d909      	bls.n	8003a70 <UART_SetConfig+0x4a0>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a62:	d205      	bcs.n	8003a70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e001      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40007c00 	.word	0x40007c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	00f42400 	.word	0x00f42400

08003a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b96:	d10a      	bne.n	8003bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fd fcce 	bl	800158c <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d10e      	bne.n	8003c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f81b 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e011      	b.n	8003c42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b09c      	sub	sp, #112	@ 0x70
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	e0a7      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	f000 80a3 	beq.w	8003dac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fd fc91 	bl	800158c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d13f      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c9c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003ca0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e6      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003cce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003cd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003cd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e068      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d050      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d18:	d148      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e6      	bne.n	8003d24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	613b      	str	r3, [r7, #16]
   return(result);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d76:	623a      	str	r2, [r7, #32]
 8003d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	69f9      	ldr	r1, [r7, #28]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e010      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	f43f af48 	beq.w	8003c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3770      	adds	r7, #112	@ 0x70
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b097      	sub	sp, #92	@ 0x5c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	d10e      	bne.n	8003e2a <UART_Start_Receive_IT+0x52>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <UART_Start_Receive_IT+0x48>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e1e:	e02d      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	@ 0xff
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e28:	e028      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <UART_Start_Receive_IT+0x76>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <UART_Start_Receive_IT+0x6c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	22ff      	movs	r2, #255	@ 0xff
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e42:	e01b      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	227f      	movs	r2, #127	@ 0x7f
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e4c:	e016      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e56:	d10d      	bne.n	8003e74 <UART_Start_Receive_IT+0x9c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <UART_Start_Receive_IT+0x92>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	227f      	movs	r2, #127	@ 0x7f
 8003e64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e68:	e008      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	223f      	movs	r2, #63	@ 0x3f
 8003e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e72:	e003      	b.n	8003e7c <UART_Start_Receive_IT+0xa4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2222      	movs	r2, #34	@ 0x22
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003eac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003eae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	d107      	bne.n	8003eda <UART_Start_Receive_IT+0x102>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <UART_Start_Receive_IT+0x184>)
 8003ed6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ed8:	e002      	b.n	8003ee0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a20      	ldr	r2, [pc, #128]	@ (8003f60 <UART_Start_Receive_IT+0x188>)
 8003ede:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d019      	beq.n	8003f1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e6      	bne.n	8003ee8 <UART_Start_Receive_IT+0x110>
 8003f1a:	e018      	b.n	8003f4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f043 0320 	orr.w	r3, r3, #32
 8003f30:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	375c      	adds	r7, #92	@ 0x5c
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	08004389 	.word	0x08004389
 8003f60:	08004223 	.word	0x08004223

08003f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b095      	sub	sp, #84	@ 0x54
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e6      	bne.n	8003f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e5      	bne.n	8003f9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d118      	bne.n	800400c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0310 	bic.w	r3, r3, #16
 8003fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004020:	bf00      	nop
 8004022:	3754      	adds	r7, #84	@ 0x54
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff faaa 	bl	80035a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b08f      	sub	sp, #60	@ 0x3c
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004064:	2b21      	cmp	r3, #33	@ 0x21
 8004066:	d14c      	bne.n	8004102 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d132      	bne.n	80040da <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	61fb      	str	r3, [r7, #28]
   return(result);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004094:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e6      	bne.n	8004074 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	613b      	str	r3, [r7, #16]
   return(result);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040d8:	e013      	b.n	8004102 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004102:	bf00      	nop
 8004104:	373c      	adds	r7, #60	@ 0x3c
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b091      	sub	sp, #68	@ 0x44
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411a:	2b21      	cmp	r3, #33	@ 0x21
 800411c:	d151      	bne.n	80041c2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d132      	bne.n	8004190 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	623b      	str	r3, [r7, #32]
   return(result);
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	633b      	str	r3, [r7, #48]	@ 0x30
 800414a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800414e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	60fb      	str	r3, [r7, #12]
   return(result);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	617b      	str	r3, [r7, #20]
   return(result);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e6      	bne.n	800415c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800418e:	e018      	b.n	80041c2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80041c2:	bf00      	nop
 80041c4:	3744      	adds	r7, #68	@ 0x44
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b088      	sub	sp, #32
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	613b      	str	r3, [r7, #16]
   return(result);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff f9bb 	bl	8003590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b096      	sub	sp, #88	@ 0x58
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004230:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423a:	2b22      	cmp	r3, #34	@ 0x22
 800423c:	f040 8098 	bne.w	8004370 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800424a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800424e:	b2d9      	uxtb	r1, r3
 8004250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	400a      	ands	r2, r1
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d17b      	bne.n	8004380 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800429c:	653b      	str	r3, [r7, #80]	@ 0x50
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e6      	bne.n	8004288 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042da:	633a      	str	r2, [r7, #48]	@ 0x30
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e5      	bne.n	80042ba <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	2b01      	cmp	r3, #1
 8004308:	d12e      	bne.n	8004368 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60fb      	str	r3, [r7, #12]
   return(result);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	617b      	str	r3, [r7, #20]
   return(result);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d103      	bne.n	8004358 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff f929 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004366:	e00b      	b.n	8004380 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc ff55 	bl	8001218 <HAL_UART_RxCpltCallback>
}
 800436e:	e007      	b.n	8004380 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0208 	orr.w	r2, r2, #8
 800437e:	619a      	str	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	3758      	adds	r7, #88	@ 0x58
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b096      	sub	sp, #88	@ 0x58
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004396:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a0:	2b22      	cmp	r3, #34	@ 0x22
 80043a2:	f040 8098 	bne.w	80044d6 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80043b6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80043ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80043be:	4013      	ands	r3, r2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	1c9a      	adds	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d17b      	bne.n	80044e6 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
 800440e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004412:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12e      	bne.n	80044ce <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60bb      	str	r3, [r7, #8]
   return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d103      	bne.n	80044be <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff f876 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044cc:	e00b      	b.n	80044e6 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fea2 	bl	8001218 <HAL_UART_RxCpltCallback>
}
 80044d4:	e007      	b.n	80044e6 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0208 	orr.w	r2, r2, #8
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	3758      	adds	r7, #88	@ 0x58
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <malloc>:
 80044f0:	4b02      	ldr	r3, [pc, #8]	@ (80044fc <malloc+0xc>)
 80044f2:	4601      	mov	r1, r0
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f000 b82d 	b.w	8004554 <_malloc_r>
 80044fa:	bf00      	nop
 80044fc:	2000000c 	.word	0x2000000c

08004500 <free>:
 8004500:	4b02      	ldr	r3, [pc, #8]	@ (800450c <free+0xc>)
 8004502:	4601      	mov	r1, r0
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f000 b903 	b.w	8004710 <_free_r>
 800450a:	bf00      	nop
 800450c:	2000000c 	.word	0x2000000c

08004510 <sbrk_aligned>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4e0f      	ldr	r6, [pc, #60]	@ (8004550 <sbrk_aligned+0x40>)
 8004514:	460c      	mov	r4, r1
 8004516:	6831      	ldr	r1, [r6, #0]
 8004518:	4605      	mov	r5, r0
 800451a:	b911      	cbnz	r1, 8004522 <sbrk_aligned+0x12>
 800451c:	f000 f8ae 	bl	800467c <_sbrk_r>
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f8a9 	bl	800467c <_sbrk_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d103      	bne.n	8004536 <sbrk_aligned+0x26>
 800452e:	f04f 34ff 	mov.w	r4, #4294967295
 8004532:	4620      	mov	r0, r4
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	1cc4      	adds	r4, r0, #3
 8004538:	f024 0403 	bic.w	r4, r4, #3
 800453c:	42a0      	cmp	r0, r4
 800453e:	d0f8      	beq.n	8004532 <sbrk_aligned+0x22>
 8004540:	1a21      	subs	r1, r4, r0
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f89a 	bl	800467c <_sbrk_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d1f2      	bne.n	8004532 <sbrk_aligned+0x22>
 800454c:	e7ef      	b.n	800452e <sbrk_aligned+0x1e>
 800454e:	bf00      	nop
 8004550:	20000120 	.word	0x20000120

08004554 <_malloc_r>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	1ccd      	adds	r5, r1, #3
 800455a:	f025 0503 	bic.w	r5, r5, #3
 800455e:	3508      	adds	r5, #8
 8004560:	2d0c      	cmp	r5, #12
 8004562:	bf38      	it	cc
 8004564:	250c      	movcc	r5, #12
 8004566:	2d00      	cmp	r5, #0
 8004568:	4606      	mov	r6, r0
 800456a:	db01      	blt.n	8004570 <_malloc_r+0x1c>
 800456c:	42a9      	cmp	r1, r5
 800456e:	d904      	bls.n	800457a <_malloc_r+0x26>
 8004570:	230c      	movs	r3, #12
 8004572:	6033      	str	r3, [r6, #0]
 8004574:	2000      	movs	r0, #0
 8004576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004650 <_malloc_r+0xfc>
 800457e:	f000 f869 	bl	8004654 <__malloc_lock>
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
 8004586:	461c      	mov	r4, r3
 8004588:	bb44      	cbnz	r4, 80045dc <_malloc_r+0x88>
 800458a:	4629      	mov	r1, r5
 800458c:	4630      	mov	r0, r6
 800458e:	f7ff ffbf 	bl	8004510 <sbrk_aligned>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	4604      	mov	r4, r0
 8004596:	d158      	bne.n	800464a <_malloc_r+0xf6>
 8004598:	f8d8 4000 	ldr.w	r4, [r8]
 800459c:	4627      	mov	r7, r4
 800459e:	2f00      	cmp	r7, #0
 80045a0:	d143      	bne.n	800462a <_malloc_r+0xd6>
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	d04b      	beq.n	800463e <_malloc_r+0xea>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	eb04 0903 	add.w	r9, r4, r3
 80045b0:	f000 f864 	bl	800467c <_sbrk_r>
 80045b4:	4581      	cmp	r9, r0
 80045b6:	d142      	bne.n	800463e <_malloc_r+0xea>
 80045b8:	6821      	ldr	r1, [r4, #0]
 80045ba:	1a6d      	subs	r5, r5, r1
 80045bc:	4629      	mov	r1, r5
 80045be:	4630      	mov	r0, r6
 80045c0:	f7ff ffa6 	bl	8004510 <sbrk_aligned>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d03a      	beq.n	800463e <_malloc_r+0xea>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	442b      	add	r3, r5
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	f8d8 3000 	ldr.w	r3, [r8]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	bb62      	cbnz	r2, 8004630 <_malloc_r+0xdc>
 80045d6:	f8c8 7000 	str.w	r7, [r8]
 80045da:	e00f      	b.n	80045fc <_malloc_r+0xa8>
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	1b52      	subs	r2, r2, r5
 80045e0:	d420      	bmi.n	8004624 <_malloc_r+0xd0>
 80045e2:	2a0b      	cmp	r2, #11
 80045e4:	d917      	bls.n	8004616 <_malloc_r+0xc2>
 80045e6:	1961      	adds	r1, r4, r5
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	6025      	str	r5, [r4, #0]
 80045ec:	bf18      	it	ne
 80045ee:	6059      	strne	r1, [r3, #4]
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	bf08      	it	eq
 80045f4:	f8c8 1000 	streq.w	r1, [r8]
 80045f8:	5162      	str	r2, [r4, r5]
 80045fa:	604b      	str	r3, [r1, #4]
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f82f 	bl	8004660 <__malloc_unlock>
 8004602:	f104 000b 	add.w	r0, r4, #11
 8004606:	1d23      	adds	r3, r4, #4
 8004608:	f020 0007 	bic.w	r0, r0, #7
 800460c:	1ac2      	subs	r2, r0, r3
 800460e:	bf1c      	itt	ne
 8004610:	1a1b      	subne	r3, r3, r0
 8004612:	50a3      	strne	r3, [r4, r2]
 8004614:	e7af      	b.n	8004576 <_malloc_r+0x22>
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	42a3      	cmp	r3, r4
 800461a:	bf0c      	ite	eq
 800461c:	f8c8 2000 	streq.w	r2, [r8]
 8004620:	605a      	strne	r2, [r3, #4]
 8004622:	e7eb      	b.n	80045fc <_malloc_r+0xa8>
 8004624:	4623      	mov	r3, r4
 8004626:	6864      	ldr	r4, [r4, #4]
 8004628:	e7ae      	b.n	8004588 <_malloc_r+0x34>
 800462a:	463c      	mov	r4, r7
 800462c:	687f      	ldr	r7, [r7, #4]
 800462e:	e7b6      	b.n	800459e <_malloc_r+0x4a>
 8004630:	461a      	mov	r2, r3
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	42a3      	cmp	r3, r4
 8004636:	d1fb      	bne.n	8004630 <_malloc_r+0xdc>
 8004638:	2300      	movs	r3, #0
 800463a:	6053      	str	r3, [r2, #4]
 800463c:	e7de      	b.n	80045fc <_malloc_r+0xa8>
 800463e:	230c      	movs	r3, #12
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	4630      	mov	r0, r6
 8004644:	f000 f80c 	bl	8004660 <__malloc_unlock>
 8004648:	e794      	b.n	8004574 <_malloc_r+0x20>
 800464a:	6005      	str	r5, [r0, #0]
 800464c:	e7d6      	b.n	80045fc <_malloc_r+0xa8>
 800464e:	bf00      	nop
 8004650:	20000124 	.word	0x20000124

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	@ (800465c <__malloc_lock+0x8>)
 8004656:	f000 b84b 	b.w	80046f0 <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000264 	.word	0x20000264

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	@ (8004668 <__malloc_unlock+0x8>)
 8004662:	f000 b846 	b.w	80046f2 <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000264 	.word	0x20000264

0800466c <memset>:
 800466c:	4402      	add	r2, r0
 800466e:	4603      	mov	r3, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <_sbrk_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d06      	ldr	r5, [pc, #24]	@ (8004698 <_sbrk_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc febe 	bl	8001408 <_sbrk>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_sbrk_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_sbrk_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000260 	.word	0x20000260

0800469c <__errno>:
 800469c:	4b01      	ldr	r3, [pc, #4]	@ (80046a4 <__errno+0x8>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c

080046a8 <__libc_init_array>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4d0d      	ldr	r5, [pc, #52]	@ (80046e0 <__libc_init_array+0x38>)
 80046ac:	4c0d      	ldr	r4, [pc, #52]	@ (80046e4 <__libc_init_array+0x3c>)
 80046ae:	1b64      	subs	r4, r4, r5
 80046b0:	10a4      	asrs	r4, r4, #2
 80046b2:	2600      	movs	r6, #0
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	d109      	bne.n	80046cc <__libc_init_array+0x24>
 80046b8:	4d0b      	ldr	r5, [pc, #44]	@ (80046e8 <__libc_init_array+0x40>)
 80046ba:	4c0c      	ldr	r4, [pc, #48]	@ (80046ec <__libc_init_array+0x44>)
 80046bc:	f000 f872 	bl	80047a4 <_init>
 80046c0:	1b64      	subs	r4, r4, r5
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	2600      	movs	r6, #0
 80046c6:	42a6      	cmp	r6, r4
 80046c8:	d105      	bne.n	80046d6 <__libc_init_array+0x2e>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d0:	4798      	blx	r3
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7ee      	b.n	80046b4 <__libc_init_array+0xc>
 80046d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046da:	4798      	blx	r3
 80046dc:	3601      	adds	r6, #1
 80046de:	e7f2      	b.n	80046c6 <__libc_init_array+0x1e>
 80046e0:	08004914 	.word	0x08004914
 80046e4:	08004914 	.word	0x08004914
 80046e8:	08004914 	.word	0x08004914
 80046ec:	08004918 	.word	0x08004918

080046f0 <__retarget_lock_acquire_recursive>:
 80046f0:	4770      	bx	lr

080046f2 <__retarget_lock_release_recursive>:
 80046f2:	4770      	bx	lr

080046f4 <memcpy>:
 80046f4:	440a      	add	r2, r1
 80046f6:	4291      	cmp	r1, r2
 80046f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046fc:	d100      	bne.n	8004700 <memcpy+0xc>
 80046fe:	4770      	bx	lr
 8004700:	b510      	push	{r4, lr}
 8004702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800470a:	4291      	cmp	r1, r2
 800470c:	d1f9      	bne.n	8004702 <memcpy+0xe>
 800470e:	bd10      	pop	{r4, pc}

08004710 <_free_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4605      	mov	r5, r0
 8004714:	2900      	cmp	r1, #0
 8004716:	d041      	beq.n	800479c <_free_r+0x8c>
 8004718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471c:	1f0c      	subs	r4, r1, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfb8      	it	lt
 8004722:	18e4      	addlt	r4, r4, r3
 8004724:	f7ff ff96 	bl	8004654 <__malloc_lock>
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <_free_r+0x90>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	b933      	cbnz	r3, 800473c <_free_r+0x2c>
 800472e:	6063      	str	r3, [r4, #4]
 8004730:	6014      	str	r4, [r2, #0]
 8004732:	4628      	mov	r0, r5
 8004734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004738:	f7ff bf92 	b.w	8004660 <__malloc_unlock>
 800473c:	42a3      	cmp	r3, r4
 800473e:	d908      	bls.n	8004752 <_free_r+0x42>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	1821      	adds	r1, r4, r0
 8004744:	428b      	cmp	r3, r1
 8004746:	bf01      	itttt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	1809      	addeq	r1, r1, r0
 800474e:	6021      	streq	r1, [r4, #0]
 8004750:	e7ed      	b.n	800472e <_free_r+0x1e>
 8004752:	461a      	mov	r2, r3
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b10b      	cbz	r3, 800475c <_free_r+0x4c>
 8004758:	42a3      	cmp	r3, r4
 800475a:	d9fa      	bls.n	8004752 <_free_r+0x42>
 800475c:	6811      	ldr	r1, [r2, #0]
 800475e:	1850      	adds	r0, r2, r1
 8004760:	42a0      	cmp	r0, r4
 8004762:	d10b      	bne.n	800477c <_free_r+0x6c>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	4401      	add	r1, r0
 8004768:	1850      	adds	r0, r2, r1
 800476a:	4283      	cmp	r3, r0
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	d1e0      	bne.n	8004732 <_free_r+0x22>
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	6053      	str	r3, [r2, #4]
 8004776:	4408      	add	r0, r1
 8004778:	6010      	str	r0, [r2, #0]
 800477a:	e7da      	b.n	8004732 <_free_r+0x22>
 800477c:	d902      	bls.n	8004784 <_free_r+0x74>
 800477e:	230c      	movs	r3, #12
 8004780:	602b      	str	r3, [r5, #0]
 8004782:	e7d6      	b.n	8004732 <_free_r+0x22>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	1821      	adds	r1, r4, r0
 8004788:	428b      	cmp	r3, r1
 800478a:	bf04      	itt	eq
 800478c:	6819      	ldreq	r1, [r3, #0]
 800478e:	685b      	ldreq	r3, [r3, #4]
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	bf04      	itt	eq
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	6054      	str	r4, [r2, #4]
 800479a:	e7ca      	b.n	8004732 <_free_r+0x22>
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	20000124 	.word	0x20000124

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
