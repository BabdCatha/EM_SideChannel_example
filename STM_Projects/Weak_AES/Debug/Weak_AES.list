
Weak_AES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045bc  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08004940  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004940  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad74  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6d  00000000  00000000  00010e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00012a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000664  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002578e  00000000  00000000  0001393c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c073  00000000  00000000  000390ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e669f  00000000  00000000  0004513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b7dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  0012b820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012dc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800476c 	.word	0x0800476c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800476c 	.word	0x0800476c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SBox>:
#include "AES.h"

uint8_t SBox(uint8_t input){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0c2      	sub	sp, #264	@ 0x108
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4602      	mov	r2, r0
 8000500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000504:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000508:	701a      	strb	r2, [r3, #0]

	uint8_t sbox[256] = {
 800050a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800050e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <SBox+0x48>)
 8000514:	4618      	mov	r0, r3
 8000516:	4611      	mov	r1, r2
 8000518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800051c:	461a      	mov	r2, r3
 800051e:	f004 f8cd 	bl	80046bc <memcpy>
	    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  // C
	    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  // D
	    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  // E
	    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}; // F

	return sbox[input];
 8000522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000526:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000530:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000534:	5cd3      	ldrb	r3, [r2, r3]

}
 8000536:	4618      	mov	r0, r3
 8000538:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	08004784 	.word	0x08004784

08000544 <subBytes>:

void subBytes(T_STATE* input){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < 4; i++){
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e009      	b.n	800056a <subBytes+0x26>
		subWord(input->state[i]);
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fb3f 	bl	8000be2 <subWord>
	for(i = 0; i < 4; i++){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	3301      	adds	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d9f2      	bls.n	8000556 <subBytes+0x12>
	}

}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <shiftRows>:

void shiftRows(T_STATE* input_state){
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]

	//A temporary array to store a copy of the line being worked on
	uint8_t* temp_array = malloc(4*sizeof(char));
 8000582:	2004      	movs	r0, #4
 8000584:	f003 ff98 	bl	80044b8 <malloc>
 8000588:	4603      	mov	r3, r0
 800058a:	60bb      	str	r3, [r7, #8]

	//Loop variables
	uint8_t i = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]

	//Looping over lines 1,2,3 of the state
	//Line 0 stays unchanged by the shiftRows operation
	for(j = 1; j < 4; j++){
 8000594:	2301      	movs	r3, #1
 8000596:	73bb      	strb	r3, [r7, #14]
 8000598:	e030      	b.n	80005fc <shiftRows+0x82>

		//Copying the line into temporary memory
		for(i = 0; i < 4; i++){
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e00d      	b.n	80005bc <shiftRows+0x42>
			temp_array[i] = input_state->state[i][j];
 80005a0:	7bf9      	ldrb	r1, [r7, #15]
 80005a2:	7bba      	ldrb	r2, [r7, #14]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	68b8      	ldr	r0, [r7, #8]
 80005a8:	4403      	add	r3, r0
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	0089      	lsls	r1, r1, #2
 80005ae:	4401      	add	r1, r0
 80005b0:	440a      	add	r2, r1
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 4; i++){
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	3301      	adds	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d9ee      	bls.n	80005a0 <shiftRows+0x26>
		}

		//Looping over the line, shifting the bytes as required
		for(i = 0; i < 4; i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e013      	b.n	80005f0 <shiftRows+0x76>
			input_state->state[i][j] = temp_array[(i+j) % 4];
 80005c8:	7bfa      	ldrb	r2, [r7, #15]
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	4413      	add	r3, r2
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0303 	and.w	r3, r3, #3
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	18d1      	adds	r1, r2, r3
 80005d8:	7bfa      	ldrb	r2, [r7, #15]
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	7808      	ldrb	r0, [r1, #0]
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	0092      	lsls	r2, r2, #2
 80005e2:	440a      	add	r2, r1
 80005e4:	4413      	add	r3, r2
 80005e6:	4602      	mov	r2, r0
 80005e8:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 4; i++){
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	3301      	adds	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d9e8      	bls.n	80005c8 <shiftRows+0x4e>
	for(j = 1; j < 4; j++){
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	3301      	adds	r3, #1
 80005fa:	73bb      	strb	r3, [r7, #14]
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d9cb      	bls.n	800059a <shiftRows+0x20>
		}

	}

	//Releasing the temporary array
	free(temp_array);
 8000602:	68b8      	ldr	r0, [r7, #8]
 8000604:	f003 ff60 	bl	80044c8 <free>

	return;
 8000608:	bf00      	nop

}
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <mixColumns>:

void mixColumns(T_STATE* input_state){
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	//A temporary array to store a copy of the column being worked on
	uint8_t* temp_array = malloc(4*sizeof(char));
 8000618:	2004      	movs	r0, #4
 800061a:	f003 ff4d 	bl	80044b8 <malloc>
 800061e:	4603      	mov	r3, r0
 8000620:	60bb      	str	r3, [r7, #8]

	//Loop variables
	uint8_t i = 0; //Column
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]

	//Iterating over the columns
	for(i = 0; i < 4; i++){
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	e09d      	b.n	8000768 <mixColumns+0x158>

		//Copying the column being worked on to the temporary array
		memcpy(temp_array, input_state->state[i], 4*sizeof(char));
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	601a      	str	r2, [r3, #0]

		//Matrix multiplication on the column, using the xtime helper function
		//See part 5.1.3 of FIPS-197 for detailed explanation
		input_state->state[i][0] = xtime(temp_array[0]) ^ (xtime(temp_array[1]) ^ temp_array[1]) ^ temp_array[2] ^ temp_array[3];
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fab5 	bl	8000bb0 <xtime>
 8000646:	4603      	mov	r3, r0
 8000648:	461c      	mov	r4, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	3301      	adds	r3, #1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 faad 	bl	8000bb0 <xtime>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4063      	eors	r3, r4
 8000666:	b2da      	uxtb	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3302      	adds	r3, #2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4053      	eors	r3, r2
 8000670:	b2d9      	uxtb	r1, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3303      	adds	r3, #3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	7bfa      	ldrb	r2, [r7, #15]
 800067a:	404b      	eors	r3, r1
 800067c:	b2d9      	uxtb	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		input_state->state[i][1] = temp_array[0] ^ xtime(temp_array[1]) ^ (xtime(temp_array[2]) ^ temp_array[2]) ^ temp_array[3];
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	781c      	ldrb	r4, [r3, #0]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	3301      	adds	r3, #1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fa8e 	bl	8000bb0 <xtime>
 8000694:	4603      	mov	r3, r0
 8000696:	4063      	eors	r3, r4
 8000698:	b2dc      	uxtb	r4, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3302      	adds	r3, #2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fa85 	bl	8000bb0 <xtime>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4053      	eors	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4063      	eors	r3, r4
 80006b6:	b2d9      	uxtb	r1, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3303      	adds	r3, #3
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	404a      	eors	r2, r1
 80006c2:	b2d1      	uxtb	r1, r2
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	460a      	mov	r2, r1
 80006cc:	705a      	strb	r2, [r3, #1]
		input_state->state[i][2] = temp_array[0] ^ temp_array[1] ^ xtime(temp_array[2]) ^ (xtime(temp_array[3]) ^ temp_array[3]);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3301      	adds	r3, #1
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4053      	eors	r3, r2
 80006da:	b2dc      	uxtb	r4, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	3302      	adds	r3, #2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa64 	bl	8000bb0 <xtime>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4063      	eors	r3, r4
 80006ec:	b2dc      	uxtb	r4, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	3303      	adds	r3, #3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fa5b 	bl	8000bb0 <xtime>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3303      	adds	r3, #3
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	4062      	eors	r2, r4
 800070c:	b2d1      	uxtb	r1, r2
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	460a      	mov	r2, r1
 8000716:	709a      	strb	r2, [r3, #2]
		input_state->state[i][3] = (xtime(temp_array[0]) ^ temp_array[0]) ^ temp_array[1] ^ temp_array[2] ^ xtime(temp_array[3]);
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa47 	bl	8000bb0 <xtime>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4053      	eors	r3, r2
 800072c:	b2da      	uxtb	r2, r3
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3301      	adds	r3, #1
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4053      	eors	r3, r2
 8000736:	b2da      	uxtb	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3302      	adds	r3, #2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4053      	eors	r3, r2
 8000740:	b2dc      	uxtb	r4, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	3303      	adds	r3, #3
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fa31 	bl	8000bb0 <xtime>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4062      	eors	r2, r4
 8000756:	b2d1      	uxtb	r1, r2
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	460a      	mov	r2, r1
 8000760:	70da      	strb	r2, [r3, #3]
	for(i = 0; i < 4; i++){
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	3301      	adds	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2b03      	cmp	r3, #3
 800076c:	f67f af5e 	bls.w	800062c <mixColumns+0x1c>

	}

	//Freeing the temporary array
	free(temp_array);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f003 fea9 	bl	80044c8 <free>

	return;
 8000776:	bf00      	nop

}
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bd90      	pop	{r4, r7, pc}

0800077e <addRoundKey>:

//XOR the current state with the round key, byte by byte
void addRoundKey(T_STATE* input_state, T_STATE* round_key){
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]

	//Loop variables
	uint8_t i = 0; //Line
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0; //Column
 800078c:	2300      	movs	r3, #0
 800078e:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < 4; i++){
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e023      	b.n	80007de <addRoundKey+0x60>
		for(j = 0; j < 4; j++){
 8000796:	2300      	movs	r3, #0
 8000798:	73bb      	strb	r3, [r7, #14]
 800079a:	e01a      	b.n	80007d2 <addRoundKey+0x54>
			input_state->state[i][j] = input_state->state[i][j] ^ round_key->state[i][j];
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	0092      	lsls	r2, r2, #2
 80007a4:	440a      	add	r2, r1
 80007a6:	4413      	add	r3, r2
 80007a8:	7818      	ldrb	r0, [r3, #0]
 80007aa:	7bfa      	ldrb	r2, [r7, #15]
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	440a      	add	r2, r1
 80007b4:	4413      	add	r3, r2
 80007b6:	7819      	ldrb	r1, [r3, #0]
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	4041      	eors	r1, r0
 80007be:	b2c8      	uxtb	r0, r1
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	440a      	add	r2, r1
 80007c6:	4413      	add	r3, r2
 80007c8:	4602      	mov	r2, r0
 80007ca:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 4; j++){
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	3301      	adds	r3, #1
 80007d0:	73bb      	strb	r3, [r7, #14]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d9e1      	bls.n	800079c <addRoundKey+0x1e>
	for(i = 0; i < 4; i++){
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3301      	adds	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d9d8      	bls.n	8000796 <addRoundKey+0x18>
		}
	}

}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <keyExpansion>:

//See section 5.2 of FIPS-197 for technical explanations
//For AES-128, Nr = 10; Nb = 4 and Nk = 4.
T_STATE** keyExpansion(uint8_t* key){
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

	//Output variable
	T_STATE** output_array;
	output_array = malloc((Nr + 1)*sizeof(T_STATE*));
 80007fc:	202c      	movs	r0, #44	@ 0x2c
 80007fe:	f003 fe5b 	bl	80044b8 <malloc>
 8000802:	4603      	mov	r3, r0
 8000804:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Loop variable
	uint8_t i = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t j = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	for(i = 0; i <= Nr; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000818:	e00e      	b.n	8000838 <keyExpansion+0x44>
	    output_array[i] = malloc(sizeof(T_STATE));
 800081a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000822:	18d4      	adds	r4, r2, r3
 8000824:	2010      	movs	r0, #16
 8000826:	f003 fe47 	bl	80044b8 <malloc>
 800082a:	4603      	mov	r3, r0
 800082c:	6023      	str	r3, [r4, #0]
	for(i = 0; i <= Nr; i++){
 800082e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000832:	3301      	adds	r3, #1
 8000834:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000838:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800083c:	2b0a      	cmp	r3, #10
 800083e:	d9ec      	bls.n	800081a <keyExpansion+0x26>
	}

	//Temp variable to hold the intermediate steps
	uint8_t** w = malloc((4 * (Nr + 1)) * sizeof(uint8_t*));
 8000840:	20b0      	movs	r0, #176	@ 0xb0
 8000842:	f003 fe39 	bl	80044b8 <malloc>
 8000846:	4603      	mov	r3, r0
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
	for(i = 0; i < (4 * (Nr + 1)); i++){
 800084a:	2300      	movs	r3, #0
 800084c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000850:	e00e      	b.n	8000870 <keyExpansion+0x7c>
	    w[i] = malloc(4*sizeof(uint8_t));
 8000852:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800085a:	18d4      	adds	r4, r2, r3
 800085c:	2004      	movs	r0, #4
 800085e:	f003 fe2b 	bl	80044b8 <malloc>
 8000862:	4603      	mov	r3, r0
 8000864:	6023      	str	r3, [r4, #0]
	for(i = 0; i < (4 * (Nr + 1)); i++){
 8000866:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086a:	3301      	adds	r3, #1
 800086c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000870:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000874:	2b2b      	cmp	r3, #43	@ 0x2b
 8000876:	d9ec      	bls.n	8000852 <keyExpansion+0x5e>
	}

	//Key expansion constants
	uint8_t Rcon[10][4] = {
 8000878:	4b92      	ldr	r3, [pc, #584]	@ (8000ac4 <keyExpansion+0x2d0>)
 800087a:	f107 0408 	add.w	r4, r7, #8
 800087e:	461d      	mov	r5, r3
 8000880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000888:	e895 0003 	ldmia.w	r5, {r0, r1}
 800088c:	e884 0003 	stmia.w	r4, {r0, r1}
			{0x80, 0x00, 0x00, 0x00},
			{0x1b, 0x00, 0x00, 0x00},
			{0x36, 0x00, 0x00, 0x00}
	};

	i = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i < Nk){
 8000896:	e03f      	b.n	8000918 <keyExpansion+0x124>
		w[i][0] = key[4*i];
 8000898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	461a      	mov	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	441a      	add	r2, r3
 80008a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008ac:	440b      	add	r3, r1
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	701a      	strb	r2, [r3, #0]
		w[i][1] = key[4*i+1];
 80008b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	3301      	adds	r3, #1
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	441a      	add	r2, r3
 80008c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008c8:	440b      	add	r3, r1
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	7812      	ldrb	r2, [r2, #0]
 80008d0:	701a      	strb	r2, [r3, #0]
		w[i][2] = key[4*i+2];
 80008d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	3302      	adds	r3, #2
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	441a      	add	r2, r3
 80008de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008e6:	440b      	add	r3, r1
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3302      	adds	r3, #2
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	701a      	strb	r2, [r3, #0]
		w[i][3] = key[4*i+3];
 80008f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	3303      	adds	r3, #3
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	441a      	add	r2, r3
 80008fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000904:	440b      	add	r3, r1
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3303      	adds	r3, #3
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	701a      	strb	r2, [r3, #0]
		i++;
 800090e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000912:	3301      	adds	r3, #1
 8000914:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i < Nk){
 8000918:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800091c:	2b03      	cmp	r3, #3
 800091e:	d9bb      	bls.n	8000898 <keyExpansion+0xa4>
	}

	//Another temporary variable
	uint8_t* temp = malloc(4*sizeof(uint8_t));
 8000920:	2004      	movs	r0, #4
 8000922:	f003 fdc9 	bl	80044b8 <malloc>
 8000926:	4603      	mov	r3, r0
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30

	while(i <= (4 * Nr) + 3){
 800092a:	e0bd      	b.n	8000aa8 <keyExpansion+0x2b4>

		memcpy(temp, w[i-1], 4*sizeof(uint8_t));
 800092c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000930:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800093a:	4413      	add	r3, r2
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000944:	601a      	str	r2, [r3, #0]

		if(i% Nk == 0){
 8000946:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d14b      	bne.n	80009ec <keyExpansion+0x1f8>
			rotWord(temp);
 8000954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000956:	f000 f964 	bl	8000c22 <rotWord>
			subWord(temp);
 800095a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800095c:	f000 f941 	bl	8000be2 <subWord>
			temp[0] = temp[0] ^ Rcon[(i/Nk) - 1][0];
 8000960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3b01      	subs	r3, #1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	3340      	adds	r3, #64	@ 0x40
 8000972:	443b      	add	r3, r7
 8000974:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000978:	4053      	eors	r3, r2
 800097a:	b2da      	uxtb	r2, r3
 800097c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097e:	701a      	strb	r2, [r3, #0]
			temp[1] = temp[1] ^ Rcon[(i/Nk) - 1][1];
 8000980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000982:	3301      	adds	r3, #1
 8000984:	7819      	ldrb	r1, [r3, #0]
 8000986:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	3340      	adds	r3, #64	@ 0x40
 8000994:	443b      	add	r3, r7
 8000996:	f813 2c37 	ldrb.w	r2, [r3, #-55]
 800099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099c:	3301      	adds	r3, #1
 800099e:	404a      	eors	r2, r1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	701a      	strb	r2, [r3, #0]
			temp[2] = temp[2] ^ Rcon[(i/Nk) - 1][2];
 80009a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a6:	3302      	adds	r3, #2
 80009a8:	7819      	ldrb	r1, [r3, #0]
 80009aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3b01      	subs	r3, #1
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3340      	adds	r3, #64	@ 0x40
 80009b8:	443b      	add	r3, r7
 80009ba:	f813 2c36 	ldrb.w	r2, [r3, #-54]
 80009be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c0:	3302      	adds	r3, #2
 80009c2:	404a      	eors	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
			temp[3] = temp[3] ^ Rcon[(i/Nk) - 1][3];
 80009c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ca:	3303      	adds	r3, #3
 80009cc:	7819      	ldrb	r1, [r3, #0]
 80009ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3b01      	subs	r3, #1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	3340      	adds	r3, #64	@ 0x40
 80009dc:	443b      	add	r3, r7
 80009de:	f813 2c35 	ldrb.w	r2, [r3, #-53]
 80009e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e4:	3303      	adds	r3, #3
 80009e6:	404a      	eors	r2, r1
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	701a      	strb	r2, [r3, #0]
		}

		w[i][0] = w[i - Nk][0] ^ temp[0];
 80009ec:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80009f0:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <keyExpansion+0x2d4>)
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009f8:	4413      	add	r3, r2
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a0a:	4403      	add	r3, r0
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	404a      	eors	r2, r1
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	701a      	strb	r2, [r3, #0]
		w[i][1] = w[i - Nk][1] ^ temp[1];
 8000a14:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <keyExpansion+0x2d4>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	7819      	ldrb	r1, [r3, #0]
 8000a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a36:	4403      	add	r3, r0
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	404a      	eors	r2, r1
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	701a      	strb	r2, [r3, #0]
		w[i][2] = w[i - Nk][2] ^ temp[2];
 8000a42:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <keyExpansion+0x2d4>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a4e:	4413      	add	r3, r2
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3302      	adds	r3, #2
 8000a54:	7819      	ldrb	r1, [r3, #0]
 8000a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a58:	3302      	adds	r3, #2
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a64:	4403      	add	r3, r0
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	404a      	eors	r2, r1
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	701a      	strb	r2, [r3, #0]
		w[i][3] = w[i - Nk][3] ^ temp[3];
 8000a70:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <keyExpansion+0x2d4>)
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a7c:	4413      	add	r3, r2
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3303      	adds	r3, #3
 8000a82:	7819      	ldrb	r1, [r3, #0]
 8000a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a86:	3303      	adds	r3, #3
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a92:	4403      	add	r3, r0
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3303      	adds	r3, #3
 8000a98:	404a      	eors	r2, r1
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	701a      	strb	r2, [r3, #0]

		i++;
 8000a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	while(i <= (4 * Nr) + 3){
 8000aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000aac:	2b2b      	cmp	r3, #43	@ 0x2b
 8000aae:	f67f af3d 	bls.w	800092c <keyExpansion+0x138>
	}

	//At this point, the columns of the round keys have been computed and stored in w
	//We transform them back into states

	for(i = 0; i <= Nr; i++){
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000ab8:	e070      	b.n	8000b9c <keyExpansion+0x3a8>
		for(j = 0; j < 4; j++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000ac0:	e063      	b.n	8000b8a <keyExpansion+0x396>
 8000ac2:	bf00      	nop
 8000ac4:	08004884 	.word	0x08004884
 8000ac8:	3ffffffc 	.word	0x3ffffffc
			output_array[i]->state[j][0] = w[4*i+j][0];
 8000acc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ad0:	009a      	lsls	r2, r3, #2
 8000ad2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000ad6:	4413      	add	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000adc:	4413      	add	r3, r2
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ae8:	4413      	add	r3, r2
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000af0:	7809      	ldrb	r1, [r1, #0]
 8000af2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			output_array[i]->state[j][1] = w[4*i+j][1];
 8000af6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000afa:	009a      	lsls	r2, r3, #2
 8000afc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b06:	4413      	add	r3, r2
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b12:	4413      	add	r3, r2
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b1a:	7849      	ldrb	r1, [r1, #1]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	460a      	mov	r2, r1
 8000b22:	705a      	strb	r2, [r3, #1]
			output_array[i]->state[j][2] = w[4*i+j][2];
 8000b24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b28:	009a      	lsls	r2, r3, #2
 8000b2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b34:	4413      	add	r3, r2
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b40:	4413      	add	r3, r2
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b48:	7889      	ldrb	r1, [r1, #2]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	460a      	mov	r2, r1
 8000b50:	709a      	strb	r2, [r3, #2]
			output_array[i]->state[j][3] = w[4*i+j][3];
 8000b52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b56:	009a      	lsls	r2, r3, #2
 8000b58:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b62:	4413      	add	r3, r2
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b6e:	4413      	add	r3, r2
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b76:	78c9      	ldrb	r1, [r1, #3]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	70da      	strb	r2, [r3, #3]
		for(j = 0; j < 4; j++){
 8000b80:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b84:	3301      	adds	r3, #1
 8000b86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000b8a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d99c      	bls.n	8000acc <keyExpansion+0x2d8>
	for(i = 0; i <= Nr; i++){
 8000b92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b96:	3301      	adds	r3, #1
 8000b98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ba0:	2b0a      	cmp	r3, #10
 8000ba2:	d98a      	bls.n	8000aba <keyExpansion+0x2c6>
		}
	}

	return output_array;
 8000ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3740      	adds	r7, #64	@ 0x40
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}
 8000bae:	bf00      	nop

08000bb0 <xtime>:

uint8_t xtime(uint8_t input){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]

	uint8_t msb = input >> 7;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	09db      	lsrs	r3, r3, #7
 8000bbe:	73bb      	strb	r3, [r7, #14]

	//See FIPS-197 for explanations
	uint8_t result = input << 1;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]

	if(msb){
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <xtime+0x24>
		result = result ^ 0x1b;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	f083 031b 	eor.w	r3, r3, #27
 8000bd2:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <subWord>:

void subWord(uint8_t* input_word){
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]

	//Loop variable
	uint8_t i = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 4; i++){
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e00e      	b.n	8000c12 <subWord+0x30>
		input_word[i] = SBox(input_word[i]);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	7819      	ldrb	r1, [r3, #0]
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	18d4      	adds	r4, r2, r3
 8000c02:	4608      	mov	r0, r1
 8000c04:	f7ff fc78 	bl	80004f8 <SBox>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 4; i++){
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d9ed      	bls.n	8000bf4 <subWord+0x12>
	}

}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}

08000c22 <rotWord>:

void rotWord(uint8_t* input_word){
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]

	//temp variable
	uint8_t temp = input_word[0];
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	73fb      	strb	r3, [r7, #15]
	input_word[0] = input_word[1];
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	785a      	ldrb	r2, [r3, #1]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	701a      	strb	r2, [r3, #0]
	input_word[1] = input_word[2];
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	7892      	ldrb	r2, [r2, #2]
 8000c40:	701a      	strb	r2, [r3, #0]
	input_word[2] = input_word[3];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3302      	adds	r3, #2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	78d2      	ldrb	r2, [r2, #3]
 8000c4a:	701a      	strb	r2, [r3, #0]
	input_word[3] = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3303      	adds	r3, #3
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	701a      	strb	r2, [r3, #0]

}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <cipher>:

void cipher(T_STATE** expanded_key, T_STATE* input){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]

	addRoundKey(input, expanded_key[0]);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	6838      	ldr	r0, [r7, #0]
 8000c72:	f7ff fd84 	bl	800077e <addRoundKey>

	uint8_t i = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]

	for(i = 1; i < 10; i++){
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e014      	b.n	8000caa <cipher+0x4a>

		subBytes(input);
 8000c80:	6838      	ldr	r0, [r7, #0]
 8000c82:	f7ff fc5f 	bl	8000544 <subBytes>
		shiftRows(input);
 8000c86:	6838      	ldr	r0, [r7, #0]
 8000c88:	f7ff fc77 	bl	800057a <shiftRows>
		mixColumns(input);
 8000c8c:	6838      	ldr	r0, [r7, #0]
 8000c8e:	f7ff fcbf 	bl	8000610 <mixColumns>
		addRoundKey(input, expanded_key[i]);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6838      	ldr	r0, [r7, #0]
 8000ca0:	f7ff fd6d 	bl	800077e <addRoundKey>
	for(i = 1; i < 10; i++){
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b09      	cmp	r3, #9
 8000cae:	d9e7      	bls.n	8000c80 <cipher+0x20>

	}

	subBytes(input);
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f7ff fc47 	bl	8000544 <subBytes>
	shiftRows(input);
 8000cb6:	6838      	ldr	r0, [r7, #0]
 8000cb8:	f7ff fc5f 	bl	800057a <shiftRows>
	addRoundKey(input, expanded_key[10]);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3328      	adds	r3, #40	@ 0x28
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6838      	ldr	r0, [r7, #0]
 8000cc6:	f7ff fd5a 	bl	800077e <addRoundKey>

	return;
 8000cca:	bf00      	nop

}
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <bytesToState>:

T_STATE* bytesToState(uint8_t* input_array){
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]

	T_STATE* output;
	output = malloc(sizeof(T_STATE));
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f003 fbec 	bl	80044b8 <malloc>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60fb      	str	r3, [r7, #12]

	output->state[0][0] = input_array[0x0];
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	701a      	strb	r2, [r3, #0]
	output->state[0][1] = input_array[0x1];
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	785a      	ldrb	r2, [r3, #1]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	705a      	strb	r2, [r3, #1]
	output->state[0][2] = input_array[0x2];
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	789a      	ldrb	r2, [r3, #2]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	709a      	strb	r2, [r3, #2]
	output->state[0][3] = input_array[0x3];
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	78da      	ldrb	r2, [r3, #3]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	70da      	strb	r2, [r3, #3]
	output->state[1][0] = input_array[0x4];
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791a      	ldrb	r2, [r3, #4]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	711a      	strb	r2, [r3, #4]
	output->state[1][1] = input_array[0x5];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	795a      	ldrb	r2, [r3, #5]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	715a      	strb	r2, [r3, #5]
	output->state[1][2] = input_array[0x6];
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	799a      	ldrb	r2, [r3, #6]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	719a      	strb	r2, [r3, #6]
	output->state[1][3] = input_array[0x7];
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	79da      	ldrb	r2, [r3, #7]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	71da      	strb	r2, [r3, #7]
	output->state[2][0] = input_array[0x8];
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7a1a      	ldrb	r2, [r3, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	721a      	strb	r2, [r3, #8]
	output->state[2][1] = input_array[0x9];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7a5a      	ldrb	r2, [r3, #9]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	725a      	strb	r2, [r3, #9]
	output->state[2][2] = input_array[0xA];
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a9a      	ldrb	r2, [r3, #10]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	729a      	strb	r2, [r3, #10]
	output->state[2][3] = input_array[0xB];
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7ada      	ldrb	r2, [r3, #11]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	72da      	strb	r2, [r3, #11]
	output->state[3][0] = input_array[0xC];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7b1a      	ldrb	r2, [r3, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	731a      	strb	r2, [r3, #12]
	output->state[3][1] = input_array[0xD];
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7b5a      	ldrb	r2, [r3, #13]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	735a      	strb	r2, [r3, #13]
	output->state[3][2] = input_array[0xE];
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7b9a      	ldrb	r2, [r3, #14]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	739a      	strb	r2, [r3, #14]
	output->state[3][3] = input_array[0xF];
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7bda      	ldrb	r2, [r3, #15]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	73da      	strb	r2, [r3, #15]

	return output;
 8000d64:	68fb      	ldr	r3, [r7, #12]

}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <stateToBytes>:

uint8_t* stateToBytes(T_STATE* input_state){
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]

	uint8_t* output;
	output = malloc(16*sizeof(uint8_t));
 8000d76:	2010      	movs	r0, #16
 8000d78:	f003 fb9e 	bl	80044b8 <malloc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60fb      	str	r3, [r7, #12]

	output[0x0] = input_state->state[0][0];
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	701a      	strb	r2, [r3, #0]
	output[0x1] = input_state->state[0][1];
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7852      	ldrb	r2, [r2, #1]
 8000d90:	701a      	strb	r2, [r3, #0]
	output[0x2] = input_state->state[0][2];
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3302      	adds	r3, #2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	7892      	ldrb	r2, [r2, #2]
 8000d9a:	701a      	strb	r2, [r3, #0]
	output[0x3] = input_state->state[0][3];
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3303      	adds	r3, #3
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	78d2      	ldrb	r2, [r2, #3]
 8000da4:	701a      	strb	r2, [r3, #0]
	output[0x4] = input_state->state[1][0];
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3304      	adds	r3, #4
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	7912      	ldrb	r2, [r2, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
	output[0x5] = input_state->state[1][1];
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3305      	adds	r3, #5
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	7952      	ldrb	r2, [r2, #5]
 8000db8:	701a      	strb	r2, [r3, #0]
	output[0x6] = input_state->state[1][2];
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3306      	adds	r3, #6
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7992      	ldrb	r2, [r2, #6]
 8000dc2:	701a      	strb	r2, [r3, #0]
	output[0x7] = input_state->state[1][3];
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	79d2      	ldrb	r2, [r2, #7]
 8000dcc:	701a      	strb	r2, [r3, #0]
	output[0x8] = input_state->state[2][0];
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	7a12      	ldrb	r2, [r2, #8]
 8000dd6:	701a      	strb	r2, [r3, #0]
	output[0x9] = input_state->state[2][1];
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3309      	adds	r3, #9
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7a52      	ldrb	r2, [r2, #9]
 8000de0:	701a      	strb	r2, [r3, #0]
	output[0xA] = input_state->state[2][2];
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	330a      	adds	r3, #10
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	7a92      	ldrb	r2, [r2, #10]
 8000dea:	701a      	strb	r2, [r3, #0]
	output[0xB] = input_state->state[2][3];
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	330b      	adds	r3, #11
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	7ad2      	ldrb	r2, [r2, #11]
 8000df4:	701a      	strb	r2, [r3, #0]
	output[0xC] = input_state->state[3][0];
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	330c      	adds	r3, #12
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	7b12      	ldrb	r2, [r2, #12]
 8000dfe:	701a      	strb	r2, [r3, #0]
	output[0xD] = input_state->state[3][1];
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	330d      	adds	r3, #13
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	7b52      	ldrb	r2, [r2, #13]
 8000e08:	701a      	strb	r2, [r3, #0]
	output[0xE] = input_state->state[3][2];
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	330e      	adds	r3, #14
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	7b92      	ldrb	r2, [r2, #14]
 8000e12:	701a      	strb	r2, [r3, #0]
	output[0xF] = input_state->state[3][3];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	330f      	adds	r3, #15
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	7bd2      	ldrb	r2, [r2, #15]
 8000e1c:	701a      	strb	r2, [r3, #0]

	return output;
 8000e1e:	68fb      	ldr	r3, [r7, #12]

}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fb26 	bl	800147e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f817 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 f8b3 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e3a:	f000 f87b 	bl	8000f34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //Preparing the AES cipher
  uint8_t key[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <main+0x34>)
 8000e40:	463c      	mov	r4, r7
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  expanded_key = keyExpansion(key);
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcd2 	bl	80007f4 <keyExpansion>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a03      	ldr	r2, [pc, #12]	@ (8000e60 <main+0x38>)
 8000e54:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e56:	bf00      	nop
 8000e58:	e7fd      	b.n	8000e56 <main+0x2e>
 8000e5a:	bf00      	nop
 8000e5c:	080048ac 	.word	0x080048ac
 8000e60:	20000114 	.word	0x20000114

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	@ 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	@ 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fbde 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e88:	f000 feda 	bl	8001c40 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <SystemClock_Config+0xc8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <SystemClock_Config+0xc8>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <SystemClock_Config+0xc8>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ea4:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eac:	4a20      	ldr	r2, [pc, #128]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <SystemClock_Config+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ece:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ed8:	2348      	movs	r3, #72	@ 0x48
 8000eda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 feb9 	bl	8001c60 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef4:	f000 f986 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2302      	movs	r3, #2
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV128;
 8000f00:	23d0      	movs	r3, #208	@ 0xd0
 8000f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 f947 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f20:	f000 f970 	bl	8001204 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	@ 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <MX_USART3_UART_Init+0x64>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f78:	f001 ff2c 	bl	8002dd4 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f93f 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  //Enabling the interrupt
  HAL_UART_Receive_IT (&huart3, Rx_data, 16);
 8000f86:	2210      	movs	r2, #16
 8000f88:	4904      	ldr	r1, [pc, #16]	@ (8000f9c <MX_USART3_UART_Init+0x68>)
 8000f8a:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <MX_USART3_UART_Init+0x60>)
 8000f8c:	f001 ffce 	bl	8002f2c <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000078 	.word	0x20000078
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	20000100 	.word	0x20000100

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	@ 0x30
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b77      	ldr	r3, [pc, #476]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a76      	ldr	r2, [pc, #472]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b74      	ldr	r3, [pc, #464]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b71      	ldr	r3, [pc, #452]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a70      	ldr	r2, [pc, #448]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b6e      	ldr	r3, [pc, #440]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a6a      	ldr	r2, [pc, #424]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b68      	ldr	r3, [pc, #416]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a64      	ldr	r2, [pc, #400]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b62      	ldr	r3, [pc, #392]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b5f      	ldr	r3, [pc, #380]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a5e      	ldr	r2, [pc, #376]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b5c      	ldr	r3, [pc, #368]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800102e:	4b59      	ldr	r3, [pc, #356]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a58      	ldr	r2, [pc, #352]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 8001034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b56      	ldr	r3, [pc, #344]	@ (8001194 <MX_GPIO_Init+0x1f4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f244 0181 	movw	r1, #16513	@ 0x4081
 800104c:	4852      	ldr	r0, [pc, #328]	@ (8001198 <MX_GPIO_Init+0x1f8>)
 800104e:	f000 fdc3 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	@ 0x40
 8001056:	4851      	ldr	r0, [pc, #324]	@ (800119c <MX_GPIO_Init+0x1fc>)
 8001058:	f000 fdbe 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	484b      	ldr	r0, [pc, #300]	@ (80011a0 <MX_GPIO_Init+0x200>)
 8001074:	f000 fc04 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001078:	2332      	movs	r3, #50	@ 0x32
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4843      	ldr	r0, [pc, #268]	@ (80011a0 <MX_GPIO_Init+0x200>)
 8001094:	f000 fbf4 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001098:	2386      	movs	r3, #134	@ 0x86
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a8:	230b      	movs	r3, #11
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	483c      	ldr	r0, [pc, #240]	@ (80011a4 <MX_GPIO_Init+0x204>)
 80010b4:	f000 fbe4 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010b8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4831      	ldr	r0, [pc, #196]	@ (8001198 <MX_GPIO_Init+0x1f8>)
 80010d2:	f000 fbd5 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e8:	230b      	movs	r3, #11
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	@ (8001198 <MX_GPIO_Init+0x1f8>)
 80010f4:	f000 fbc4 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4823      	ldr	r0, [pc, #140]	@ (800119c <MX_GPIO_Init+0x1fc>)
 8001110:	f000 fbb6 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	481d      	ldr	r0, [pc, #116]	@ (800119c <MX_GPIO_Init+0x1fc>)
 8001128:	f000 fbaa 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800112c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800113e:	230a      	movs	r3, #10
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4816      	ldr	r0, [pc, #88]	@ (80011a4 <MX_GPIO_Init+0x204>)
 800114a:	f000 fb99 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800114e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4810      	ldr	r0, [pc, #64]	@ (80011a4 <MX_GPIO_Init+0x204>)
 8001164:	f000 fb8c 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001168:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117a:	230b      	movs	r3, #11
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_GPIO_Init+0x1fc>)
 8001186:	f000 fb7b 	bl	8001880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	@ 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//This will be called once 16 bytes are received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  //HAL_UART_Receive_IT(&huart3, Rx_data, 16);
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <HAL_UART_RxCpltCallback+0x48>)
 80011b4:	f000 fd29 	bl	8001c0a <HAL_GPIO_TogglePin>
  T_STATE* input;
  input = bytesToState(Rx_data);
 80011b8:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <HAL_UART_RxCpltCallback+0x4c>)
 80011ba:	f7ff fd8a 	bl	8000cd2 <bytesToState>
 80011be:	60f8      	str	r0, [r7, #12]

  cipher(expanded_key, input);
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_UART_RxCpltCallback+0x50>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd4a 	bl	8000c60 <cipher>

  Tx_data = stateToBytes(input);
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fdce 	bl	8000d6e <stateToBytes>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <HAL_UART_RxCpltCallback+0x54>)
 80011d6:	6013      	str	r3, [r2, #0]

  HAL_UART_Transmit_IT(&huart3, Tx_data, 16*sizeof(uint8_t));
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_UART_RxCpltCallback+0x54>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2210      	movs	r2, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <HAL_UART_RxCpltCallback+0x58>)
 80011e2:	f001 fe45 	bl	8002e70 <HAL_UART_Transmit_IT>

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020400 	.word	0x40020400
 80011f4:	20000100 	.word	0x20000100
 80011f8:	20000114 	.word	0x20000114
 80011fc:	20000110 	.word	0x20000110
 8001200:	20000078 	.word	0x20000078

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_MspInit+0x44>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_MspInit+0x44>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x44>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x44>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001238:	6453      	str	r3, [r2, #68]	@ 0x44
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x44>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0aa      	sub	sp, #168	@ 0xa8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2284      	movs	r2, #132	@ 0x84
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f9db 	bl	8004634 <memset>
  if(huart->Instance==USART3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a26      	ldr	r2, [pc, #152]	@ (800131c <HAL_UART_MspInit+0xc4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d144      	bne.n	8001312 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800128c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800128e:	2310      	movs	r3, #16
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f9ac 	bl	80025f4 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012a2:	f7ff ffaf 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_UART_MspInit+0xc8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012fa:	4619      	mov	r1, r3
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <HAL_UART_MspInit+0xcc>)
 80012fe:	f000 fabf 	bl	8001880 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2027      	movs	r0, #39	@ 0x27
 8001308:	f000 f9f1 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800130c:	2027      	movs	r0, #39	@ 0x27
 800130e:	f000 fa0a 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	37a8      	adds	r7, #168	@ 0xa8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40004800 	.word	0x40004800
 8001320:	40023800 	.word	0x40023800
 8001324:	40020c00 	.word	0x40020c00

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <UsageFault_Handler+0x4>

08001350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 f8bb 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <USART3_IRQHandler+0x10>)
 800138e:	f001 fe11 	bl	8002fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000078 	.word	0x20000078

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f003 f94a 	bl	8004664 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20050000 	.word	0x20050000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20000118 	.word	0x20000118
 8001404:	20000268 	.word	0x20000268

08001408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001432:	490e      	ldr	r1, [pc, #56]	@ (800146c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001434:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001448:	4c0b      	ldr	r4, [pc, #44]	@ (8001478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001456:	f7ff ffd7 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f003 f909 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff fce3 	bl	8000e28 <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001470:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001474:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001478:	20000268 	.word	0x20000268

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>

0800147e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f928 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f805 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff febf 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f943 	bl	8001742 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f90b 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008
 800151c:	2000011c 	.word	0x2000011c

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000011c 	.word	0x2000011c

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	05fa0000 	.word	0x05fa0000

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff feda 	bl	8001520 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d008      	beq.n	800178c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e052      	b.n	8001832 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0216 	bic.w	r2, r2, #22
 800179a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <HAL_DMA_Abort+0x62>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0208 	bic.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	e013      	b.n	8001806 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017de:	f7ff fe9f 	bl	8001520 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d90c      	bls.n	8001806 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e015      	b.n	8001832 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e4      	bne.n	80017de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	223f      	movs	r2, #63	@ 0x3f
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d004      	beq.n	8001858 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e00c      	b.n	8001872 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2205      	movs	r2, #5
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e175      	b.n	8001b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8164 	bne.w	8001b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x56>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80be 	beq.w	8001b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a22:	4a61      	ldr	r2, [pc, #388]	@ (8001ba8 <HAL_GPIO_Init+0x328>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_GPIO_Init+0x32c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d037      	beq.n	8001abe <HAL_GPIO_Init+0x23e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_GPIO_Init+0x23a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a56      	ldr	r2, [pc, #344]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02b      	beq.n	8001ab6 <HAL_GPIO_Init+0x236>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <HAL_GPIO_Init+0x338>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x232>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a54      	ldr	r2, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x33c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x22e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a53      	ldr	r2, [pc, #332]	@ (8001bc0 <HAL_GPIO_Init+0x340>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x22a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_GPIO_Init+0x344>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <HAL_GPIO_Init+0x348>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_GPIO_Init+0x34c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <HAL_GPIO_Init+0x350>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a96:	2309      	movs	r3, #9
 8001a98:	e012      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	e010      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	e00e      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_GPIO_Init+0x328>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f ae86 	bls.w	80018a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40021c00 	.word	0x40021c00
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40022400 	.word	0x40022400
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40007000 	.word	0x40007000

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e291      	b.n	800219a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8087 	beq.w	8001d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c84:	4b96      	ldr	r3, [pc, #600]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d00c      	beq.n	8001caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c90:	4b93      	ldr	r3, [pc, #588]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d112      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x62>
 8001c9c:	4b90      	ldr	r3, [pc, #576]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d06c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x130>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d168      	bne.n	8001d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e26b      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x7a>
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a83      	ldr	r2, [pc, #524]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e02e      	b.n	8001d38 <HAL_RCC_OscConfig+0xd8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x9c>
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xd8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d06:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a72      	ldr	r2, [pc, #456]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xd8>
 8001d20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fbee 	bl	8001520 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fbea 	bl	8001520 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e21f      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fbda 	bl	8001520 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fbd6 	bl	8001520 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e20b      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b57      	ldr	r3, [pc, #348]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x110>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d069      	beq.n	8001e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9e:	4b50      	ldr	r3, [pc, #320]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x190>
 8001db6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x17a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1df      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	493d      	ldr	r1, [pc, #244]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e040      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a38      	ldr	r2, [pc, #224]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb8c 	bl	8001520 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb88 	bl	8001520 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1bd      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4929      	ldr	r1, [pc, #164]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fb68 	bl	8001520 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff fb64 	bl	8001520 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e199      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d038      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb45 	bl	8001520 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fb41 	bl	8001520 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e176      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x23a>
 8001eb8:	e01a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb2b 	bl	8001520 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff fb27 	bl	8001520 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d903      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e15c      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
 8001ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b91      	ldr	r3, [pc, #580]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a4 	beq.w	8002046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a87      	ldr	r2, [pc, #540]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	4b82      	ldr	r3, [pc, #520]	@ (8002130 <HAL_RCC_OscConfig+0x4d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f32:	4b7f      	ldr	r3, [pc, #508]	@ (8002130 <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	@ (8002130 <HAL_RCC_OscConfig+0x4d0>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff faef 	bl	8001520 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff faeb 	bl	8001520 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	@ 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e120      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	4b75      	ldr	r3, [pc, #468]	@ (8002130 <HAL_RCC_OscConfig+0x4d0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x31a>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f70:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x33c>
 8001f82:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a69      	ldr	r2, [pc, #420]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8e:	4b67      	ldr	r3, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a66      	ldr	r2, [pc, #408]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x35e>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a60      	ldr	r2, [pc, #384]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fca:	4b58      	ldr	r3, [pc, #352]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a57      	ldr	r2, [pc, #348]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa9f 	bl	8001520 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fa9b 	bl	8001520 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0ce      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x386>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fa89 	bl	8001520 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fa85 	bl	8001520 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0b8      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3c      	ldr	r3, [pc, #240]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a4 	beq.w	8002198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d06b      	beq.n	8002134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d149      	bne.n	80020f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b31      	ldr	r3, [pc, #196]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a30      	ldr	r2, [pc, #192]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 800206a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fa56 	bl	8001520 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff fa52 	bl	8001520 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e087      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	019b      	lsls	r3, r3, #6
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	3b01      	subs	r3, #1
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	4313      	orrs	r3, r2
 80020bc:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a18      	ldr	r2, [pc, #96]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff fa26 	bl	8001520 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fa22 	bl	8001520 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e057      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x478>
 80020f6:	e04f      	b.n	8002198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fa0c 	bl	8001520 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fa08 	bl	8001520 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e03d      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_RCC_OscConfig+0x4cc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x4ac>
 800212a:	e035      	b.n	8002198 <HAL_RCC_OscConfig+0x538>
 800212c:	40023800 	.word	0x40023800
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_RCC_OscConfig+0x544>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d028      	beq.n	8002194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d121      	bne.n	8002194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11a      	bne.n	8002194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002164:	4013      	ands	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800216a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216c:	4293      	cmp	r3, r2
 800216e:	d111      	bne.n	8002194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	3b01      	subs	r3, #1
 800217e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d0      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b6a      	ldr	r3, [pc, #424]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b67      	ldr	r3, [pc, #412]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	4965      	ldr	r1, [pc, #404]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800220e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e073      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4936      	ldr	r1, [pc, #216]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229c:	f7ff f940 	bl	8001520 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff f93c 	bl	8001520 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e053      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d210      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	4922      	ldr	r1, [pc, #136]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	@ (8002374 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1d0>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f89c 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	080048bc 	.word	0x080048bc
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b094      	sub	sp, #80	@ 0x50
 8002386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	@ 0x44
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002398:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x40>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	f200 80e1 	bhi.w	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x3a>
 80023b2:	e0db      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b73      	ldr	r3, [pc, #460]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023b8:	e0db      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x208>)
 80023bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023be:	e0d8      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	2200      	movs	r2, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6139      	str	r1, [r7, #16]
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002424:	4659      	mov	r1, fp
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4651      	mov	r1, sl
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4651      	mov	r1, sl
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4651      	mov	r1, sl
 8002434:	ebb2 0801 	subs.w	r8, r2, r1
 8002438:	4659      	mov	r1, fp
 800243a:	eb63 0901 	sbc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	462b      	mov	r3, r5
 8002460:	eb49 0303 	adc.w	r3, r9, r3
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002472:	4629      	mov	r1, r5
 8002474:	024b      	lsls	r3, r1, #9
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247c:	4621      	mov	r1, r4
 800247e:	024a      	lsls	r2, r1, #9
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800248c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002490:	f7fd feba 	bl	8000208 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800249c:	e058      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4611      	mov	r1, r2
 80024aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4641      	mov	r1, r8
 80024d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f0:	ebb2 040a 	subs.w	r4, r2, sl
 80024f4:	eb63 050b 	sbc.w	r5, r3, fp
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	61fa      	str	r2, [r7, #28]
 8002540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002544:	f7fd fe60 	bl	8000208 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 800256e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002574:	4618      	mov	r0, r3
 8002576:	3750      	adds	r7, #80	@ 0x50
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	00f42400 	.word	0x00f42400
 8002588:	007a1200 	.word	0x007a1200

0800258c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff0 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	080048cc 	.word	0x080048cc

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffdc 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0b5b      	lsrs	r3, r3, #13
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	080048cc 	.word	0x080048cc

080025f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800261c:	4b69      	ldr	r3, [pc, #420]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a68      	ldr	r2, [pc, #416]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002626:	6093      	str	r3, [r2, #8]
 8002628:	4b66      	ldr	r3, [pc, #408]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	4964      	ldr	r1, [pc, #400]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800264e:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265c:	4959      	ldr	r1, [pc, #356]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800268a:	4b4e      	ldr	r3, [pc, #312]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	494a      	ldr	r1, [pc, #296]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a8:	d101      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 808b 	beq.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b3a      	ldr	r3, [pc, #232]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	4a39      	ldr	r2, [pc, #228]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e4:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a34      	ldr	r2, [pc, #208]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7fe ff10 	bl	8001520 <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7fe ff0c 	bl	8001520 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	@ 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e357      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002716:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002722:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d035      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d02e      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002740:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002748:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002756:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002762:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d114      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fed4 	bl	8001520 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fed0 	bl	8001520 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e319      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027aa:	d111      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ba:	400b      	ands	r3, r1
 80027bc:	4901      	ldr	r1, [pc, #4]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
 80027c2:	e00b      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
 80027cc:	0ffffcff 	.word	0x0ffffcff
 80027d0:	4baa      	ldr	r3, [pc, #680]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4aa9      	ldr	r2, [pc, #676]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027da:	6093      	str	r3, [r2, #8]
 80027dc:	4ba7      	ldr	r3, [pc, #668]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	49a4      	ldr	r1, [pc, #656]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027fa:	4ba0      	ldr	r3, [pc, #640]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002800:	4a9e      	ldr	r2, [pc, #632]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800280a:	4b9c      	ldr	r3, [pc, #624]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	4999      	ldr	r1, [pc, #612]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002828:	4b94      	ldr	r3, [pc, #592]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002836:	4991      	ldr	r1, [pc, #580]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284a:	4b8c      	ldr	r3, [pc, #560]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002858:	4988      	ldr	r1, [pc, #544]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800286c:	4b83      	ldr	r3, [pc, #524]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287a:	4980      	ldr	r1, [pc, #512]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800288e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	4977      	ldr	r1, [pc, #476]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b0:	4b72      	ldr	r3, [pc, #456]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	496f      	ldr	r1, [pc, #444]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d8:	f023 020c 	bic.w	r2, r3, #12
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	4966      	ldr	r1, [pc, #408]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f4:	4b61      	ldr	r3, [pc, #388]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	495e      	ldr	r1, [pc, #376]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002916:	4b59      	ldr	r3, [pc, #356]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	4955      	ldr	r1, [pc, #340]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002938:	4b50      	ldr	r3, [pc, #320]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	494d      	ldr	r1, [pc, #308]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800295a:	4b48      	ldr	r3, [pc, #288]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002960:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4944      	ldr	r1, [pc, #272]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800297c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	493c      	ldr	r1, [pc, #240]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ac:	4933      	ldr	r1, [pc, #204]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029c0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ce:	492b      	ldr	r1, [pc, #172]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d011      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029e2:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f0:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a22:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a30:	4912      	ldr	r1, [pc, #72]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a44:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a54:	4909      	ldr	r1, [pc, #36]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d006      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d9 	beq.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a70:	4b02      	ldr	r3, [pc, #8]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a01      	ldr	r2, [pc, #4]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a7a:	e001      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a82:	f7fe fd4d 	bl	8001520 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a8a:	f7fe fd49 	bl	8001520 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	@ 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e194      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d021      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11d      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002abc:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aca:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad0:	0e1b      	lsrs	r3, r3, #24
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	019a      	lsls	r2, r3, #6
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	071b      	lsls	r3, r3, #28
 8002af0:	4957      	ldr	r1, [pc, #348]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b22:	d129      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b24:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b38:	0f1b      	lsrs	r3, r3, #28
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	019a      	lsls	r2, r3, #6
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	071b      	lsls	r3, r3, #28
 8002b58:	493d      	ldr	r1, [pc, #244]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b60:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b66:	f023 021f 	bic.w	r2, r3, #31
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4937      	ldr	r1, [pc, #220]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01d      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b84:	4b32      	ldr	r3, [pc, #200]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b8a:	0e1b      	lsrs	r3, r3, #24
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b92:	4b2f      	ldr	r3, [pc, #188]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b98:	0f1b      	lsrs	r3, r3, #28
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	019a      	lsls	r2, r3, #6
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	071b      	lsls	r3, r3, #28
 8002bb8:	4925      	ldr	r1, [pc, #148]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d011      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	019a      	lsls	r2, r3, #6
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	071b      	lsls	r3, r3, #28
 8002be8:	4919      	ldr	r1, [pc, #100]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bf0:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fc90 	bl	8001520 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c04:	f7fe fc8c 	bl	8001520 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0d7      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80cd 	bne.w	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c36:	f7fe fc73 	bl	8001520 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c3e:	f7fe fc6f 	bl	8001520 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	@ 0x64
 8002c4a:	d903      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0ba      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c54:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c60:	d0ed      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02e      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d12a      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c8a:	4b51      	ldr	r3, [pc, #324]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c98:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	0f1b      	lsrs	r3, r3, #28
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	019a      	lsls	r2, r3, #6
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	071b      	lsls	r3, r3, #28
 8002cbe:	4944      	ldr	r1, [pc, #272]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cc6:	4b42      	ldr	r3, [pc, #264]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ccc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	493d      	ldr	r1, [pc, #244]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d022      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cf4:	d11d      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cf6:	4b36      	ldr	r3, [pc, #216]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	0e1b      	lsrs	r3, r3, #24
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d04:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	0f1b      	lsrs	r3, r3, #28
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	019a      	lsls	r2, r3, #6
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d028      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	0e1b      	lsrs	r3, r3, #24
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	019a      	lsls	r2, r3, #6
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	431a      	orrs	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	071b      	lsls	r3, r3, #28
 8002d72:	4917      	ldr	r1, [pc, #92]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	4911      	ldr	r1, [pc, #68]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fbc0 	bl	8001520 <HAL_GetTick>
 8002da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002da4:	f7fe fbbc 	bl	8001520 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e007      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc2:	d1ef      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e040      	b.n	8002e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fa2e 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fbc0 	bl	8003598 <UART_SetConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e022      	b.n	8002e68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fe18 	bl	8003a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fe9f 	bl	8003ba4 <UART_CheckIdleState>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b08b      	sub	sp, #44	@ 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d147      	bne.n	8002f16 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_UART_Transmit_IT+0x22>
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e040      	b.n	8002f18 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	@ 0x21
 8002ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec8:	d107      	bne.n	8002eda <HAL_UART_Transmit_IT+0x6a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <HAL_UART_Transmit_IT+0xb4>)
 8002ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002ed8:	e002      	b.n	8002ee0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <HAL_UART_Transmit_IT+0xb8>)
 8002ede:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	613b      	str	r3, [r7, #16]
   return(result);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e6      	bne.n	8002ee0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	372c      	adds	r7, #44	@ 0x2c
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	080040d7 	.word	0x080040d7
 8002f28:	08004021 	.word	0x08004021

08002f2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	@ 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d132      	bne.n	8002faa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_UART_Receive_IT+0x24>
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e02b      	b.n	8002fac <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d018      	beq.n	8002f9a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	613b      	str	r3, [r7, #16]
   return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	69f9      	ldr	r1, [r7, #28]
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e6      	bne.n	8002f68 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fefd 	bl	8003da0 <UART_Start_Receive_IT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	e000      	b.n	8002fac <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	@ 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b0ba      	sub	sp, #232	@ 0xe8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002fde:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00f      	beq.n	800301c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8297 	beq.w	8003540 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
      }
      return;
 800301a:	e291      	b.n	8003540 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800301c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8117 	beq.w	8003254 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003036:	4b85      	ldr	r3, [pc, #532]	@ (800324c <HAL_UART_IRQHandler+0x298>)
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 810a 	beq.w	8003254 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d011      	beq.n	8003070 <HAL_UART_IRQHandler+0xbc>
 800304c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <HAL_UART_IRQHandler+0xec>
 800307c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2202      	movs	r2, #2
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <HAL_UART_IRQHandler+0x11c>
 80030ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2204      	movs	r2, #4
 80030be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c6:	f043 0202 	orr.w	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d017      	beq.n	800310c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2208      	movs	r2, #8
 80030fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003102:	f043 0208 	orr.w	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800310c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <HAL_UART_IRQHandler+0x18a>
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800311c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800312c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 81fd 	beq.w	8003544 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003178:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d005      	beq.n	8003196 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800318a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800318e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04f      	beq.n	8003236 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fec8 	bl	8003f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d141      	bne.n	800322e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1d9      	bne.n	80031aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <HAL_UART_IRQHandler+0x29c>)
 8003204:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fb15 	bl	800183a <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00f      	b.n	8003246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9a0 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00b      	b.n	8003246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f99c 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e007      	b.n	8003246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f998 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003244:	e17e      	b.n	8003544 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	bf00      	nop
    return;
 8003248:	e17c      	b.n	8003544 <HAL_UART_IRQHandler+0x590>
 800324a:	bf00      	nop
 800324c:	04000120 	.word	0x04000120
 8003250:	08003ff5 	.word	0x08003ff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 814c 	bne.w	80034f6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8145 	beq.w	80034f6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 813e 	beq.w	80034f6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	f040 80b6 	bne.w	80033fe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800329e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8150 	beq.w	8003548 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f080 8148 	bcs.w	8003548 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032cc:	f000 8086 	beq.w	80033dc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003306:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1da      	bne.n	80032d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800332a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3308      	adds	r3, #8
 800333a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800333e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003342:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003346:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e1      	bne.n	800331a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3308      	adds	r3, #8
 800335c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800337a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800337c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003380:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ac:	f023 0310 	bic.w	r3, r3, #16
 80033b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e4      	bne.n	800339c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe f9bf 	bl	800175a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8c2 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033fc:	e0a4      	b.n	8003548 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800340a:	b29b      	uxth	r3, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8096 	beq.w	800354c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8091 	beq.w	800354c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800344c:	647b      	str	r3, [r7, #68]	@ 0x44
 800344e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800345a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e4      	bne.n	800342a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3308      	adds	r3, #8
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	623b      	str	r3, [r7, #32]
   return(result);
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003484:	633a      	str	r2, [r7, #48]	@ 0x30
 8003486:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800348a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e3      	bne.n	8003460 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	617b      	str	r3, [r7, #20]
   return(result);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e4      	bne.n	80034ac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f846 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034f4:	e02a      	b.n	800354c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01c      	beq.n	8003550 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
    }
    return;
 800351e:	e017      	b.n	8003550 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_UART_IRQHandler+0x59e>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fe2c 	bl	8004196 <UART_EndTransmit_IT>
    return;
 800353e:	e008      	b.n	8003552 <HAL_UART_IRQHandler+0x59e>
      return;
 8003540:	bf00      	nop
 8003542:	e006      	b.n	8003552 <HAL_UART_IRQHandler+0x59e>
    return;
 8003544:	bf00      	nop
 8003546:	e004      	b.n	8003552 <HAL_UART_IRQHandler+0x59e>
      return;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <HAL_UART_IRQHandler+0x59e>
      return;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_UART_IRQHandler+0x59e>
    return;
 8003550:	bf00      	nop
  }

}
 8003552:	37e8      	adds	r7, #232	@ 0xe8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4ba6      	ldr	r3, [pc, #664]	@ (800385c <UART_SetConfig+0x2c4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a94      	ldr	r2, [pc, #592]	@ (8003860 <UART_SetConfig+0x2c8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d120      	bne.n	8003656 <UART_SetConfig+0xbe>
 8003614:	4b93      	ldr	r3, [pc, #588]	@ (8003864 <UART_SetConfig+0x2cc>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d816      	bhi.n	8003650 <UART_SetConfig+0xb8>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <UART_SetConfig+0x90>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	08003645 	.word	0x08003645
 8003630:	0800363f 	.word	0x0800363f
 8003634:	0800364b 	.word	0x0800364b
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e150      	b.n	80038e0 <UART_SetConfig+0x348>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e14d      	b.n	80038e0 <UART_SetConfig+0x348>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e14a      	b.n	80038e0 <UART_SetConfig+0x348>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e147      	b.n	80038e0 <UART_SetConfig+0x348>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e144      	b.n	80038e0 <UART_SetConfig+0x348>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a83      	ldr	r2, [pc, #524]	@ (8003868 <UART_SetConfig+0x2d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d132      	bne.n	80036c6 <UART_SetConfig+0x12e>
 8003660:	4b80      	ldr	r3, [pc, #512]	@ (8003864 <UART_SetConfig+0x2cc>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d828      	bhi.n	80036c0 <UART_SetConfig+0x128>
 800366e:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0xdc>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036c1 	.word	0x080036c1
 800367c:	080036c1 	.word	0x080036c1
 8003680:	080036c1 	.word	0x080036c1
 8003684:	080036b5 	.word	0x080036b5
 8003688:	080036c1 	.word	0x080036c1
 800368c:	080036c1 	.word	0x080036c1
 8003690:	080036c1 	.word	0x080036c1
 8003694:	080036af 	.word	0x080036af
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036c1 	.word	0x080036c1
 80036a4:	080036bb 	.word	0x080036bb
 80036a8:	2300      	movs	r3, #0
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e118      	b.n	80038e0 <UART_SetConfig+0x348>
 80036ae:	2302      	movs	r3, #2
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e115      	b.n	80038e0 <UART_SetConfig+0x348>
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e112      	b.n	80038e0 <UART_SetConfig+0x348>
 80036ba:	2308      	movs	r3, #8
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e10f      	b.n	80038e0 <UART_SetConfig+0x348>
 80036c0:	2310      	movs	r3, #16
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e10c      	b.n	80038e0 <UART_SetConfig+0x348>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a68      	ldr	r2, [pc, #416]	@ (800386c <UART_SetConfig+0x2d4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d120      	bne.n	8003712 <UART_SetConfig+0x17a>
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <UART_SetConfig+0x2cc>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036da:	2b30      	cmp	r3, #48	@ 0x30
 80036dc:	d013      	beq.n	8003706 <UART_SetConfig+0x16e>
 80036de:	2b30      	cmp	r3, #48	@ 0x30
 80036e0:	d814      	bhi.n	800370c <UART_SetConfig+0x174>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d009      	beq.n	80036fa <UART_SetConfig+0x162>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d810      	bhi.n	800370c <UART_SetConfig+0x174>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <UART_SetConfig+0x15c>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d006      	beq.n	8003700 <UART_SetConfig+0x168>
 80036f2:	e00b      	b.n	800370c <UART_SetConfig+0x174>
 80036f4:	2300      	movs	r3, #0
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e0f2      	b.n	80038e0 <UART_SetConfig+0x348>
 80036fa:	2302      	movs	r3, #2
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e0ef      	b.n	80038e0 <UART_SetConfig+0x348>
 8003700:	2304      	movs	r3, #4
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e0ec      	b.n	80038e0 <UART_SetConfig+0x348>
 8003706:	2308      	movs	r3, #8
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e0e9      	b.n	80038e0 <UART_SetConfig+0x348>
 800370c:	2310      	movs	r3, #16
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e0e6      	b.n	80038e0 <UART_SetConfig+0x348>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a56      	ldr	r2, [pc, #344]	@ (8003870 <UART_SetConfig+0x2d8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d120      	bne.n	800375e <UART_SetConfig+0x1c6>
 800371c:	4b51      	ldr	r3, [pc, #324]	@ (8003864 <UART_SetConfig+0x2cc>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003726:	2bc0      	cmp	r3, #192	@ 0xc0
 8003728:	d013      	beq.n	8003752 <UART_SetConfig+0x1ba>
 800372a:	2bc0      	cmp	r3, #192	@ 0xc0
 800372c:	d814      	bhi.n	8003758 <UART_SetConfig+0x1c0>
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d009      	beq.n	8003746 <UART_SetConfig+0x1ae>
 8003732:	2b80      	cmp	r3, #128	@ 0x80
 8003734:	d810      	bhi.n	8003758 <UART_SetConfig+0x1c0>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x1a8>
 800373a:	2b40      	cmp	r3, #64	@ 0x40
 800373c:	d006      	beq.n	800374c <UART_SetConfig+0x1b4>
 800373e:	e00b      	b.n	8003758 <UART_SetConfig+0x1c0>
 8003740:	2300      	movs	r3, #0
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e0cc      	b.n	80038e0 <UART_SetConfig+0x348>
 8003746:	2302      	movs	r3, #2
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e0c9      	b.n	80038e0 <UART_SetConfig+0x348>
 800374c:	2304      	movs	r3, #4
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e0c6      	b.n	80038e0 <UART_SetConfig+0x348>
 8003752:	2308      	movs	r3, #8
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e0c3      	b.n	80038e0 <UART_SetConfig+0x348>
 8003758:	2310      	movs	r3, #16
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e0c0      	b.n	80038e0 <UART_SetConfig+0x348>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a44      	ldr	r2, [pc, #272]	@ (8003874 <UART_SetConfig+0x2dc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d125      	bne.n	80037b4 <UART_SetConfig+0x21c>
 8003768:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <UART_SetConfig+0x2cc>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003776:	d017      	beq.n	80037a8 <UART_SetConfig+0x210>
 8003778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800377c:	d817      	bhi.n	80037ae <UART_SetConfig+0x216>
 800377e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003782:	d00b      	beq.n	800379c <UART_SetConfig+0x204>
 8003784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003788:	d811      	bhi.n	80037ae <UART_SetConfig+0x216>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <UART_SetConfig+0x1fe>
 800378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003792:	d006      	beq.n	80037a2 <UART_SetConfig+0x20a>
 8003794:	e00b      	b.n	80037ae <UART_SetConfig+0x216>
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0a1      	b.n	80038e0 <UART_SetConfig+0x348>
 800379c:	2302      	movs	r3, #2
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e09e      	b.n	80038e0 <UART_SetConfig+0x348>
 80037a2:	2304      	movs	r3, #4
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e09b      	b.n	80038e0 <UART_SetConfig+0x348>
 80037a8:	2308      	movs	r3, #8
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e098      	b.n	80038e0 <UART_SetConfig+0x348>
 80037ae:	2310      	movs	r3, #16
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e095      	b.n	80038e0 <UART_SetConfig+0x348>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003878 <UART_SetConfig+0x2e0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d125      	bne.n	800380a <UART_SetConfig+0x272>
 80037be:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <UART_SetConfig+0x2cc>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037cc:	d017      	beq.n	80037fe <UART_SetConfig+0x266>
 80037ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037d2:	d817      	bhi.n	8003804 <UART_SetConfig+0x26c>
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d8:	d00b      	beq.n	80037f2 <UART_SetConfig+0x25a>
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037de:	d811      	bhi.n	8003804 <UART_SetConfig+0x26c>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <UART_SetConfig+0x254>
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e8:	d006      	beq.n	80037f8 <UART_SetConfig+0x260>
 80037ea:	e00b      	b.n	8003804 <UART_SetConfig+0x26c>
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e076      	b.n	80038e0 <UART_SetConfig+0x348>
 80037f2:	2302      	movs	r3, #2
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e073      	b.n	80038e0 <UART_SetConfig+0x348>
 80037f8:	2304      	movs	r3, #4
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e070      	b.n	80038e0 <UART_SetConfig+0x348>
 80037fe:	2308      	movs	r3, #8
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e06d      	b.n	80038e0 <UART_SetConfig+0x348>
 8003804:	2310      	movs	r3, #16
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e06a      	b.n	80038e0 <UART_SetConfig+0x348>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <UART_SetConfig+0x2e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d138      	bne.n	8003886 <UART_SetConfig+0x2ee>
 8003814:	4b13      	ldr	r3, [pc, #76]	@ (8003864 <UART_SetConfig+0x2cc>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800381e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003822:	d017      	beq.n	8003854 <UART_SetConfig+0x2bc>
 8003824:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003828:	d82a      	bhi.n	8003880 <UART_SetConfig+0x2e8>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382e:	d00b      	beq.n	8003848 <UART_SetConfig+0x2b0>
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003834:	d824      	bhi.n	8003880 <UART_SetConfig+0x2e8>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <UART_SetConfig+0x2aa>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	d006      	beq.n	800384e <UART_SetConfig+0x2b6>
 8003840:	e01e      	b.n	8003880 <UART_SetConfig+0x2e8>
 8003842:	2300      	movs	r3, #0
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e04b      	b.n	80038e0 <UART_SetConfig+0x348>
 8003848:	2302      	movs	r3, #2
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e048      	b.n	80038e0 <UART_SetConfig+0x348>
 800384e:	2304      	movs	r3, #4
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e045      	b.n	80038e0 <UART_SetConfig+0x348>
 8003854:	2308      	movs	r3, #8
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e042      	b.n	80038e0 <UART_SetConfig+0x348>
 800385a:	bf00      	nop
 800385c:	efff69f3 	.word	0xefff69f3
 8003860:	40011000 	.word	0x40011000
 8003864:	40023800 	.word	0x40023800
 8003868:	40004400 	.word	0x40004400
 800386c:	40004800 	.word	0x40004800
 8003870:	40004c00 	.word	0x40004c00
 8003874:	40005000 	.word	0x40005000
 8003878:	40011400 	.word	0x40011400
 800387c:	40007800 	.word	0x40007800
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e02c      	b.n	80038e0 <UART_SetConfig+0x348>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a72      	ldr	r2, [pc, #456]	@ (8003a54 <UART_SetConfig+0x4bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d125      	bne.n	80038dc <UART_SetConfig+0x344>
 8003890:	4b71      	ldr	r3, [pc, #452]	@ (8003a58 <UART_SetConfig+0x4c0>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800389a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800389e:	d017      	beq.n	80038d0 <UART_SetConfig+0x338>
 80038a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038a4:	d817      	bhi.n	80038d6 <UART_SetConfig+0x33e>
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038aa:	d00b      	beq.n	80038c4 <UART_SetConfig+0x32c>
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b0:	d811      	bhi.n	80038d6 <UART_SetConfig+0x33e>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <UART_SetConfig+0x326>
 80038b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ba:	d006      	beq.n	80038ca <UART_SetConfig+0x332>
 80038bc:	e00b      	b.n	80038d6 <UART_SetConfig+0x33e>
 80038be:	2300      	movs	r3, #0
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e00d      	b.n	80038e0 <UART_SetConfig+0x348>
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e00a      	b.n	80038e0 <UART_SetConfig+0x348>
 80038ca:	2304      	movs	r3, #4
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e007      	b.n	80038e0 <UART_SetConfig+0x348>
 80038d0:	2308      	movs	r3, #8
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x348>
 80038d6:	2310      	movs	r3, #16
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e001      	b.n	80038e0 <UART_SetConfig+0x348>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d15b      	bne.n	80039a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d828      	bhi.n	8003942 <UART_SetConfig+0x3aa>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <UART_SetConfig+0x360>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003943 	.word	0x08003943
 8003908:	08003933 	.word	0x08003933
 800390c:	08003943 	.word	0x08003943
 8003910:	08003943 	.word	0x08003943
 8003914:	08003943 	.word	0x08003943
 8003918:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fe42 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003920:	61b8      	str	r0, [r7, #24]
        break;
 8003922:	e013      	b.n	800394c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe fe52 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003928:	61b8      	str	r0, [r7, #24]
        break;
 800392a:	e00f      	b.n	800394c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a5c <UART_SetConfig+0x4c4>)
 800392e:	61bb      	str	r3, [r7, #24]
        break;
 8003930:	e00c      	b.n	800394c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe fd25 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8003936:	61b8      	str	r0, [r7, #24]
        break;
 8003938:	e008      	b.n	800394c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393e:	61bb      	str	r3, [r7, #24]
        break;
 8003940:	e004      	b.n	800394c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	77bb      	strb	r3, [r7, #30]
        break;
 800394a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d074      	beq.n	8003a3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	005a      	lsls	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d916      	bls.n	800399c <UART_SetConfig+0x404>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d212      	bcs.n	800399c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f023 030f 	bic.w	r3, r3, #15
 800397e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	b29a      	uxth	r2, r3
 800398c:	89fb      	ldrh	r3, [r7, #14]
 800398e:	4313      	orrs	r3, r2
 8003990:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	89fa      	ldrh	r2, [r7, #14]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	e04f      	b.n	8003a3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	77bb      	strb	r3, [r7, #30]
 80039a0:	e04c      	b.n	8003a3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d828      	bhi.n	80039fa <UART_SetConfig+0x462>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <UART_SetConfig+0x418>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe fde6 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 80039d8:	61b8      	str	r0, [r7, #24]
        break;
 80039da:	e013      	b.n	8003a04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe fdf6 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80039e0:	61b8      	str	r0, [r7, #24]
        break;
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <UART_SetConfig+0x4c4>)
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	e00c      	b.n	8003a04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fcc9 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 80039ee:	61b8      	str	r0, [r7, #24]
        break;
 80039f0:	e008      	b.n	8003a04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e004      	b.n	8003a04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	77bb      	strb	r3, [r7, #30]
        break;
 8003a02:	bf00      	nop
    }

    if (pclk != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	085a      	lsrs	r2, r3, #1
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d909      	bls.n	8003a38 <UART_SetConfig+0x4a0>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2a:	d205      	bcs.n	8003a38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	e001      	b.n	8003a3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40007c00 	.word	0x40007c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b5e:	d10a      	bne.n	8003b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb4:	f7fd fcb4 	bl	8001520 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d10e      	bne.n	8003be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f81b 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e011      	b.n	8003c0a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b09c      	sub	sp, #112	@ 0x70
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	e0a7      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	f000 80a3 	beq.w	8003d74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fd fc77 	bl	8001520 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13f      	bne.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c54:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c64:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003c68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c96:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c98:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e068      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d050      	beq.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce0:	d148      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d0c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d3e:	623a      	str	r2, [r7, #32]
 8003d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	69f9      	ldr	r1, [r7, #28]
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e010      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	f43f af48 	beq.w	8003c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3770      	adds	r7, #112	@ 0x70
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b097      	sub	sp, #92	@ 0x5c
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d10e      	bne.n	8003df2 <UART_Start_Receive_IT+0x52>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <UART_Start_Receive_IT+0x48>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003de2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003de6:	e02d      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	22ff      	movs	r2, #255	@ 0xff
 8003dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003df0:	e028      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <UART_Start_Receive_IT+0x76>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <UART_Start_Receive_IT+0x6c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e0a:	e01b      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	227f      	movs	r2, #127	@ 0x7f
 8003e10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e14:	e016      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e1e:	d10d      	bne.n	8003e3c <UART_Start_Receive_IT+0x9c>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <UART_Start_Receive_IT+0x92>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	227f      	movs	r2, #127	@ 0x7f
 8003e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e30:	e008      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	223f      	movs	r2, #63	@ 0x3f
 8003e36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e3a:	e003      	b.n	8003e44 <UART_Start_Receive_IT+0xa4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2222      	movs	r2, #34	@ 0x22
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e90:	d107      	bne.n	8003ea2 <UART_Start_Receive_IT+0x102>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <UART_Start_Receive_IT+0x184>)
 8003e9e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ea0:	e002      	b.n	8003ea8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <UART_Start_Receive_IT+0x188>)
 8003ea6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d019      	beq.n	8003ee4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_Start_Receive_IT+0x110>
 8003ee2:	e018      	b.n	8003f16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f043 0320 	orr.w	r3, r3, #32
 8003ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	69f9      	ldr	r1, [r7, #28]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e6      	bne.n	8003ee4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	375c      	adds	r7, #92	@ 0x5c
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	08004351 	.word	0x08004351
 8003f28:	080041eb 	.word	0x080041eb

08003f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b095      	sub	sp, #84	@ 0x54
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e5      	bne.n	8003f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d118      	bne.n	8003fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6979      	ldr	r1, [r7, #20]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e6      	bne.n	8003fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fe8:	bf00      	nop
 8003fea:	3754      	adds	r7, #84	@ 0x54
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff faaa 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b08f      	sub	sp, #60	@ 0x3c
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402c:	2b21      	cmp	r3, #33	@ 0x21
 800402e:	d14c      	bne.n	80040ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d132      	bne.n	80040a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	61fb      	str	r3, [r7, #28]
   return(result);
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004050:	637b      	str	r3, [r7, #52]	@ 0x34
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60bb      	str	r3, [r7, #8]
   return(result);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004082:	633b      	str	r3, [r7, #48]	@ 0x30
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	613b      	str	r3, [r7, #16]
   return(result);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040a0:	e013      	b.n	80040ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80040ca:	bf00      	nop
 80040cc:	373c      	adds	r7, #60	@ 0x3c
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b091      	sub	sp, #68	@ 0x44
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e2:	2b21      	cmp	r3, #33	@ 0x21
 80040e4:	d151      	bne.n	800418a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d132      	bne.n	8004158 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
 8004112:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e6      	bne.n	80040f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	60fb      	str	r3, [r7, #12]
   return(result);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	617b      	str	r3, [r7, #20]
   return(result);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004156:	e018      	b.n	800418a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800415e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800418a:	bf00      	nop
 800418c:	3744      	adds	r7, #68	@ 0x44
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b088      	sub	sp, #32
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff f9bb 	bl	8003558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b096      	sub	sp, #88	@ 0x58
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004202:	2b22      	cmp	r3, #34	@ 0x22
 8004204:	f040 8098 	bne.w	8004338 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004212:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004216:	b2d9      	uxtb	r1, r3
 8004218:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800421c:	b2da      	uxtb	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	400a      	ands	r2, r1
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d17b      	bne.n	8004348 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800425e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004264:	653b      	str	r3, [r7, #80]	@ 0x50
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800426e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004270:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e6      	bne.n	8004250 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3308      	adds	r3, #8
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d12e      	bne.n	8004330 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	617b      	str	r3, [r7, #20]
   return(result);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e6      	bne.n	80042d8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d103      	bne.n	8004320 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2210      	movs	r2, #16
 800431e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff f929 	bl	8003580 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800432e:	e00b      	b.n	8004348 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc ff39 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 8004336:	e007      	b.n	8004348 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	619a      	str	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	3758      	adds	r7, #88	@ 0x58
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b096      	sub	sp, #88	@ 0x58
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800435e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004368:	2b22      	cmp	r3, #34	@ 0x22
 800436a:	f040 8098 	bne.w	800449e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800437e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8004382:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004386:	4013      	ands	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800438c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d17b      	bne.n	80044ae <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004434:	2b01      	cmp	r3, #1
 8004436:	d12e      	bne.n	8004496 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60bb      	str	r3, [r7, #8]
   return(result);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	647b      	str	r3, [r7, #68]	@ 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d103      	bne.n	8004486 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f876 	bl	8003580 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004494:	e00b      	b.n	80044ae <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fe86 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 800449c:	e007      	b.n	80044ae <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	3758      	adds	r7, #88	@ 0x58
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <malloc>:
 80044b8:	4b02      	ldr	r3, [pc, #8]	@ (80044c4 <malloc+0xc>)
 80044ba:	4601      	mov	r1, r0
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	f000 b82d 	b.w	800451c <_malloc_r>
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c

080044c8 <free>:
 80044c8:	4b02      	ldr	r3, [pc, #8]	@ (80044d4 <free+0xc>)
 80044ca:	4601      	mov	r1, r0
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f000 b903 	b.w	80046d8 <_free_r>
 80044d2:	bf00      	nop
 80044d4:	2000000c 	.word	0x2000000c

080044d8 <sbrk_aligned>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4e0f      	ldr	r6, [pc, #60]	@ (8004518 <sbrk_aligned+0x40>)
 80044dc:	460c      	mov	r4, r1
 80044de:	6831      	ldr	r1, [r6, #0]
 80044e0:	4605      	mov	r5, r0
 80044e2:	b911      	cbnz	r1, 80044ea <sbrk_aligned+0x12>
 80044e4:	f000 f8ae 	bl	8004644 <_sbrk_r>
 80044e8:	6030      	str	r0, [r6, #0]
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f8a9 	bl	8004644 <_sbrk_r>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d103      	bne.n	80044fe <sbrk_aligned+0x26>
 80044f6:	f04f 34ff 	mov.w	r4, #4294967295
 80044fa:	4620      	mov	r0, r4
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0f8      	beq.n	80044fa <sbrk_aligned+0x22>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4628      	mov	r0, r5
 800450c:	f000 f89a 	bl	8004644 <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1f2      	bne.n	80044fa <sbrk_aligned+0x22>
 8004514:	e7ef      	b.n	80044f6 <sbrk_aligned+0x1e>
 8004516:	bf00      	nop
 8004518:	20000120 	.word	0x20000120

0800451c <_malloc_r>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	1ccd      	adds	r5, r1, #3
 8004522:	f025 0503 	bic.w	r5, r5, #3
 8004526:	3508      	adds	r5, #8
 8004528:	2d0c      	cmp	r5, #12
 800452a:	bf38      	it	cc
 800452c:	250c      	movcc	r5, #12
 800452e:	2d00      	cmp	r5, #0
 8004530:	4606      	mov	r6, r0
 8004532:	db01      	blt.n	8004538 <_malloc_r+0x1c>
 8004534:	42a9      	cmp	r1, r5
 8004536:	d904      	bls.n	8004542 <_malloc_r+0x26>
 8004538:	230c      	movs	r3, #12
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	2000      	movs	r0, #0
 800453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004618 <_malloc_r+0xfc>
 8004546:	f000 f869 	bl	800461c <__malloc_lock>
 800454a:	f8d8 3000 	ldr.w	r3, [r8]
 800454e:	461c      	mov	r4, r3
 8004550:	bb44      	cbnz	r4, 80045a4 <_malloc_r+0x88>
 8004552:	4629      	mov	r1, r5
 8004554:	4630      	mov	r0, r6
 8004556:	f7ff ffbf 	bl	80044d8 <sbrk_aligned>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	4604      	mov	r4, r0
 800455e:	d158      	bne.n	8004612 <_malloc_r+0xf6>
 8004560:	f8d8 4000 	ldr.w	r4, [r8]
 8004564:	4627      	mov	r7, r4
 8004566:	2f00      	cmp	r7, #0
 8004568:	d143      	bne.n	80045f2 <_malloc_r+0xd6>
 800456a:	2c00      	cmp	r4, #0
 800456c:	d04b      	beq.n	8004606 <_malloc_r+0xea>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	4639      	mov	r1, r7
 8004572:	4630      	mov	r0, r6
 8004574:	eb04 0903 	add.w	r9, r4, r3
 8004578:	f000 f864 	bl	8004644 <_sbrk_r>
 800457c:	4581      	cmp	r9, r0
 800457e:	d142      	bne.n	8004606 <_malloc_r+0xea>
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	1a6d      	subs	r5, r5, r1
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff ffa6 	bl	80044d8 <sbrk_aligned>
 800458c:	3001      	adds	r0, #1
 800458e:	d03a      	beq.n	8004606 <_malloc_r+0xea>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	442b      	add	r3, r5
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	f8d8 3000 	ldr.w	r3, [r8]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	bb62      	cbnz	r2, 80045f8 <_malloc_r+0xdc>
 800459e:	f8c8 7000 	str.w	r7, [r8]
 80045a2:	e00f      	b.n	80045c4 <_malloc_r+0xa8>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	1b52      	subs	r2, r2, r5
 80045a8:	d420      	bmi.n	80045ec <_malloc_r+0xd0>
 80045aa:	2a0b      	cmp	r2, #11
 80045ac:	d917      	bls.n	80045de <_malloc_r+0xc2>
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	6025      	str	r5, [r4, #0]
 80045b4:	bf18      	it	ne
 80045b6:	6059      	strne	r1, [r3, #4]
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	bf08      	it	eq
 80045bc:	f8c8 1000 	streq.w	r1, [r8]
 80045c0:	5162      	str	r2, [r4, r5]
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 f82f 	bl	8004628 <__malloc_unlock>
 80045ca:	f104 000b 	add.w	r0, r4, #11
 80045ce:	1d23      	adds	r3, r4, #4
 80045d0:	f020 0007 	bic.w	r0, r0, #7
 80045d4:	1ac2      	subs	r2, r0, r3
 80045d6:	bf1c      	itt	ne
 80045d8:	1a1b      	subne	r3, r3, r0
 80045da:	50a3      	strne	r3, [r4, r2]
 80045dc:	e7af      	b.n	800453e <_malloc_r+0x22>
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	bf0c      	ite	eq
 80045e4:	f8c8 2000 	streq.w	r2, [r8]
 80045e8:	605a      	strne	r2, [r3, #4]
 80045ea:	e7eb      	b.n	80045c4 <_malloc_r+0xa8>
 80045ec:	4623      	mov	r3, r4
 80045ee:	6864      	ldr	r4, [r4, #4]
 80045f0:	e7ae      	b.n	8004550 <_malloc_r+0x34>
 80045f2:	463c      	mov	r4, r7
 80045f4:	687f      	ldr	r7, [r7, #4]
 80045f6:	e7b6      	b.n	8004566 <_malloc_r+0x4a>
 80045f8:	461a      	mov	r2, r3
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d1fb      	bne.n	80045f8 <_malloc_r+0xdc>
 8004600:	2300      	movs	r3, #0
 8004602:	6053      	str	r3, [r2, #4]
 8004604:	e7de      	b.n	80045c4 <_malloc_r+0xa8>
 8004606:	230c      	movs	r3, #12
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	4630      	mov	r0, r6
 800460c:	f000 f80c 	bl	8004628 <__malloc_unlock>
 8004610:	e794      	b.n	800453c <_malloc_r+0x20>
 8004612:	6005      	str	r5, [r0, #0]
 8004614:	e7d6      	b.n	80045c4 <_malloc_r+0xa8>
 8004616:	bf00      	nop
 8004618:	20000124 	.word	0x20000124

0800461c <__malloc_lock>:
 800461c:	4801      	ldr	r0, [pc, #4]	@ (8004624 <__malloc_lock+0x8>)
 800461e:	f000 b84b 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	20000264 	.word	0x20000264

08004628 <__malloc_unlock>:
 8004628:	4801      	ldr	r0, [pc, #4]	@ (8004630 <__malloc_unlock+0x8>)
 800462a:	f000 b846 	b.w	80046ba <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	20000264 	.word	0x20000264

08004634 <memset>:
 8004634:	4402      	add	r2, r0
 8004636:	4603      	mov	r3, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <_sbrk_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	@ (8004660 <_sbrk_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc fea4 	bl	800139c <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_sbrk_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_sbrk_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	20000260 	.word	0x20000260

08004664 <__errno>:
 8004664:	4b01      	ldr	r3, [pc, #4]	@ (800466c <__errno+0x8>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4d0d      	ldr	r5, [pc, #52]	@ (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	@ (80046ac <__libc_init_array+0x3c>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2600      	movs	r6, #0
 800467c:	42a6      	cmp	r6, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4d0b      	ldr	r5, [pc, #44]	@ (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	@ (80046b4 <__libc_init_array+0x44>)
 8004684:	f000 f872 	bl	800476c <_init>
 8004688:	1b64      	subs	r4, r4, r5
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2600      	movs	r6, #0
 800468e:	42a6      	cmp	r6, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f855 3b04 	ldr.w	r3, [r5], #4
 8004698:	4798      	blx	r3
 800469a:	3601      	adds	r6, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a2:	4798      	blx	r3
 80046a4:	3601      	adds	r6, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	080048dc 	.word	0x080048dc
 80046ac:	080048dc 	.word	0x080048dc
 80046b0:	080048dc 	.word	0x080048dc
 80046b4:	080048e0 	.word	0x080048e0

080046b8 <__retarget_lock_acquire_recursive>:
 80046b8:	4770      	bx	lr

080046ba <__retarget_lock_release_recursive>:
 80046ba:	4770      	bx	lr

080046bc <memcpy>:
 80046bc:	440a      	add	r2, r1
 80046be:	4291      	cmp	r1, r2
 80046c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046c4:	d100      	bne.n	80046c8 <memcpy+0xc>
 80046c6:	4770      	bx	lr
 80046c8:	b510      	push	{r4, lr}
 80046ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046d2:	4291      	cmp	r1, r2
 80046d4:	d1f9      	bne.n	80046ca <memcpy+0xe>
 80046d6:	bd10      	pop	{r4, pc}

080046d8 <_free_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4605      	mov	r5, r0
 80046dc:	2900      	cmp	r1, #0
 80046de:	d041      	beq.n	8004764 <_free_r+0x8c>
 80046e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e4:	1f0c      	subs	r4, r1, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	18e4      	addlt	r4, r4, r3
 80046ec:	f7ff ff96 	bl	800461c <__malloc_lock>
 80046f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <_free_r+0x90>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	b933      	cbnz	r3, 8004704 <_free_r+0x2c>
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	4628      	mov	r0, r5
 80046fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004700:	f7ff bf92 	b.w	8004628 <__malloc_unlock>
 8004704:	42a3      	cmp	r3, r4
 8004706:	d908      	bls.n	800471a <_free_r+0x42>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	1821      	adds	r1, r4, r0
 800470c:	428b      	cmp	r3, r1
 800470e:	bf01      	itttt	eq
 8004710:	6819      	ldreq	r1, [r3, #0]
 8004712:	685b      	ldreq	r3, [r3, #4]
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	e7ed      	b.n	80046f6 <_free_r+0x1e>
 800471a:	461a      	mov	r2, r3
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b10b      	cbz	r3, 8004724 <_free_r+0x4c>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d9fa      	bls.n	800471a <_free_r+0x42>
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	1850      	adds	r0, r2, r1
 8004728:	42a0      	cmp	r0, r4
 800472a:	d10b      	bne.n	8004744 <_free_r+0x6c>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	4401      	add	r1, r0
 8004730:	1850      	adds	r0, r2, r1
 8004732:	4283      	cmp	r3, r0
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	d1e0      	bne.n	80046fa <_free_r+0x22>
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	6053      	str	r3, [r2, #4]
 800473e:	4408      	add	r0, r1
 8004740:	6010      	str	r0, [r2, #0]
 8004742:	e7da      	b.n	80046fa <_free_r+0x22>
 8004744:	d902      	bls.n	800474c <_free_r+0x74>
 8004746:	230c      	movs	r3, #12
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	e7d6      	b.n	80046fa <_free_r+0x22>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428b      	cmp	r3, r1
 8004752:	bf04      	itt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	bf04      	itt	eq
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	6054      	str	r4, [r2, #4]
 8004762:	e7ca      	b.n	80046fa <_free_r+0x22>
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	20000124 	.word	0x20000124

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
